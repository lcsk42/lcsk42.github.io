<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arthas on Lucas's Article</title><link>https://www.lcsk42.com/tags/arthas/</link><description>Recent content in Arthas on Lucas's Article</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Mar 2024 09:39:46 +0800</lastBuildDate><atom:link href="https://www.lcsk42.com/tags/arthas/index.xml" rel="self" type="application/rss+xml"/><item><title>OGNL Language Guide</title><link>https://www.lcsk42.com/post/ognl-language-guide/</link><pubDate>Sat, 23 Mar 2024 09:39:46 +0800</pubDate><guid>https://www.lcsk42.com/post/ognl-language-guide/</guid><description>&lt;p>翻译自&lt;a class="link" href="https://commons.apache.org/dormant/commons-ognl/language-guide.html" target="_blank" rel="noopener"
>Apache 官网 OGNL&lt;/a>的语言指南。&lt;/p>
&lt;blockquote>
&lt;p>Object-Graph Navigation Language (OGNL) is an open-source Expression Language (EL) for Java, which, while using simpler expressions than the full range of those supported by the Java language, allows getting and setting properties (through defined setProperty and getProperty methods, found in JavaBeans), and execution of methods of Java classes. It also allows for simpler array manipulation.&lt;/p>
&lt;p>&amp;ndash; &lt;a class="link" href="https://en.wikipedia.org/wiki/OGNL" target="_blank" rel="noopener"
>Wikipedia OGNL&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>对象图导航语言(OGNL)是 Java 的开源表达式语言(EL)，它是所有 Java 语言支持范围中最简单的表达式，它允许获取和设置属性(通过 JavaBeans 中定义的 setProperty 和 getProperty 方法)以及执行 Java 类的方法。它还允许更简单的数组操作。&lt;/p>
&lt;h2 id="syntax语法">Syntax(语法)
&lt;/h2>&lt;blockquote>
&lt;p>Basic OGNL expressions are very simple. The language has become quite rich with features, but you don&amp;rsquo;t generally need to worry about the more complicated parts of the language: the simple cases have remained that way. For example, to get at the name property of an object, the OGNL expression is simply name. To get at the text property of the object returned by the headline property, the OGNL expression is headline.text.&lt;/p>&lt;/blockquote>
&lt;p>基础的 OGNL 表达式非常简单，虽然该语言现在的特性已经变得非常丰富，但是你通常不需要担心语言中更复杂的部分：简单的情况下跟之前是一样的。例如：要获取对象的 name 属性，OGNL 的表达式就是简单的 name。要获取 headline 属性中的文本对象，OGNL 的表达式就是 headline.text。&lt;/p>
&lt;blockquote>
&lt;p>What is a property? Roughly, an OGNL property is the same as a bean property, which means that a pair of get/set methods, or alternatively a field, defines a property (the full story is a bit more complicated, since properties differ for different kinds of objects; see below for a full explanation).&lt;/p>&lt;/blockquote>
&lt;p>什么是属性呢？大致来讲，OGNL 的属性跟 bean 对象的属性是完全相同的，这意味着一对 get/set 方法或者一个字段定义了一个属性(完整的情况会更加复杂，因为对象有不同类型的属性，详见下文的解释)。&lt;/p>
&lt;blockquote>
&lt;p>The fundamental unit of an OGNL expression is the navigation chain, usually just called &amp;ldquo;chain.&amp;rdquo; The simplest chains consist of the following parts:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 表达式的基本单元是导航链，简称：“链”，最简单的链由下面几部分组成：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Expression Element Part&lt;/th>
&lt;th style="text-align: left">Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Property names&lt;/td>
&lt;td style="text-align: left">like the name and headline.text examples above&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Method Calls&lt;/td>
&lt;td style="text-align: left">hashCode() to return the current object&amp;rsquo;s hash code&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Array Indices&lt;/td>
&lt;td style="text-align: left">listeners[0] to return the first of the current object&amp;rsquo;s list of listeners&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">表达式元素部分&lt;/th>
&lt;th style="text-align: left">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">属性名称&lt;/td>
&lt;td style="text-align: left">上方举例的 name 和 headline.text&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">方法调用&lt;/td>
&lt;td style="text-align: left">hashCode() 返回当前对象的哈希值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">数组索引&lt;/td>
&lt;td style="text-align: left">listeners[0] 返回 listeners 列表中的第一个对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>All OGNL expressions are evaluated in the context of a current object, and a chain simply uses the result of the previous link in the chain as the current object for the next one. You can extend a chain as long as you like. For example, this chain:&lt;/p>&lt;/blockquote>
&lt;p>所有 OGNL 表达式都在当前对象的上下文中求值,链中使用前一个链的返回结果作为当前链的当前对象，也就是支持链式调用，你想把链拉多长都可以，例如，下面这条链：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">numericValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This expression follows these steps to evaluate:&lt;/p>&lt;/blockquote>
&lt;p>这个表达式按照下面的步骤进行求值：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>extracts the name property of the initial, or root, object (which the user provides to OGNL through the OGNL context);&lt;/li>
&lt;li>calls the toCharArray() method on the resulting String;&lt;/li>
&lt;li>extracts the first character (the one at index 0) from the resulting array;&lt;/li>
&lt;li>gets the numericValue property from that character (the character is represented as a Character object, and the Character class has a method called getNumericValue());&lt;/li>
&lt;li>calls toString() on the resulting Integer object. The final result of this expression is the String returned by the last toString() call.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>提取初始对象或根对象(root)（用户通过 OGNL 上下文传递给 OGNL）的 name 属性&lt;/li>
&lt;li>在返回的结果字符串上调用 toCharArray() 方法&lt;/li>
&lt;li>从返回的结果数组中提取第一个字符（索引为 0 的字符）&lt;/li>
&lt;li>从这个字符中获取 numericValue 属性(字符代表 Character 对象，Character 类有一个方法叫 getNumericValue())。&lt;/li>
&lt;li>在返回结果的 Integer 对象上调用 toString() 方法。这个表达式最终的返回结果是 toString() 方法的返回的字符串。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note that this example can only be used to get a value from an object, not to set a value. Passing the above expression to the Ognl.setValue() method would cause an InappropriateExpressionException to be thrown, because the last link in the chain is neither a property name nor an array index.&lt;/p>&lt;/blockquote>
&lt;p>请注意，这个示例只能用于从对象中获取值，而不能用于设置值。将上述表达式传递给 Ognl.setValue() 方法将会抛出 InappropriateExpressionException 异常，因为链中的最后一个链接并不是属性名，也不是数组索引。&lt;/p>
&lt;blockquote>
&lt;p>This is enough syntax to do the vast majority of what you ever need to do.&lt;/p>&lt;/blockquote>
&lt;p>但是这种语法已经足够满足大多数工作所需。&lt;/p>
&lt;h2 id="expressions表达式">Expressions(表达式)
&lt;/h2>&lt;blockquote>
&lt;p>This section outlines the details the elements of OGNL&amp;rsquo;s expressions.&lt;/p>&lt;/blockquote>
&lt;p>本章将详细介绍 OGNL 表达式的各种细节。&lt;/p>
&lt;h3 id="constants常量">Constants(常量)
&lt;/h3>&lt;blockquote>
&lt;p>OGNL has the following kinds of constants:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 有以下几种常量：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>String literals, as in Java (with the addition of single quotes): delimited by single- or double-quotes, with the full set of character escapes;&lt;/li>
&lt;li>Character literals, also as in Java: delimited by single-quotes, also with the full set of escapes;&lt;/li>
&lt;li>Numeric literals, with a few more kinds than Java. In addition to Java&amp;rsquo;s ints, longs, floats and doubles, OGNL lets you specify BigDecimals with a &amp;ldquo;b&amp;rdquo; or &amp;ldquo;B&amp;rdquo; suffix, and BigIntegers with an &amp;ldquo;h&amp;rdquo; or &amp;ldquo;H&amp;rdquo; suffix (think &amp;ldquo;huge&amp;rdquo;&amp;mdash;we chose &amp;ldquo;h&amp;rdquo; for BigIntegers because it does not interfere with hexadecimal digits);&lt;/li>
&lt;li>Boolean (true and false) literals;&lt;/li>
&lt;li>The null literal.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;hr>
&lt;ul>
&lt;li>字符串字面值，如在 Java (另增加单引号)中：由单引号或双引号包裹，并且带有完整的转义集；&lt;/li>
&lt;li>字符字面量，也和 Java 中一样：被单引号分割，也带有全套的转义；&lt;/li>
&lt;li>数字字面值，比 Java 中多了一些类型，除了 Java 中的整型、长型、浮点数和双精度浮点数外，OGNL 还允许你指定带有 &amp;ldquo;b&amp;rdquo; 或 &amp;ldquo;b&amp;rdquo; 后缀的 BigDecimals，以及带有 &amp;ldquo;h&amp;rdquo; 或 &amp;ldquo;h&amp;rdquo; 后缀的 BigIntegers(考虑 &amp;ldquo;huge&amp;rdquo; ——我们选择 &amp;ldquo;h&amp;rdquo; 表示 BigIntegers，因为它并不会干扰十六进制数字)；&lt;/li>
&lt;li>布尔(真和假)字面值；&lt;/li>
&lt;li>空文字。&lt;/li>
&lt;/ul>
&lt;h3 id="referring-to-properties引用属性">Referring to Properties(引用属性)
&lt;/h3>&lt;blockquote>
&lt;p>OGNL treats different kinds of objects differently in its handling of property references. Maps treat all property references as element lookups or storage, with the property name as the key. Lists and arrays treat numeric properties similarly, with the property name as the index, but string properties the same way ordinary objects do. Ordinary objects (that is, all other kinds) only can handle string properties and do so by using &amp;ldquo;get&amp;rdquo; and &amp;ldquo;set&amp;rdquo; methods (or &amp;ldquo;is&amp;rdquo; and &amp;ldquo;set&amp;rdquo;), if the object has them, or a field with the given name otherwise.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 在处理属性引用时以不同的方式对待不同类型的对象。使用属性名将所有属性映射为对象进行查找或存储。列表和数组使用同样的方式用索引(index)作为属性名处理数字属性。而处理字符串属性的方式与普通对象相同，普通对象(即所有其他类型的对象)如果有 &amp;ldquo;get&amp;rdquo; 和 &amp;ldquo;set&amp;rdquo; 方法(或 &amp;ldquo;is&amp;rdquo; 和 &amp;ldquo;set&amp;rdquo;)，则只能通过使用处理字符串属性，如果没有则使用给定的字段名称处理字符串属性。&lt;/p>
&lt;blockquote>
&lt;p>Note the new terminology here. Property &amp;ldquo;names&amp;rdquo; can be of any type, not just Strings. But to refer to non-String properties, you must use what we have been calling the &amp;ldquo;index&amp;rdquo; notation. For example, to get the length of an array, you can use this expression:&lt;/p>&lt;/blockquote>
&lt;p>注意这里的新术语。属性 &amp;ldquo;name&amp;rdquo; 可以是任何类型，而不仅仅是字符串。但是要引用非字符串属性，必须使用我们一直称为 &amp;ldquo;index&amp;rdquo; 的符号。例如，要获取一个数组的长度，你可以使用这个表达式:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>But to get at element 0 of the array, you must use an expression like this:&lt;/p>&lt;/blockquote>
&lt;p>但是要获取数组的第 0 个元素，你必须使用这样的表达式:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Note that Java collections have some special properties associated with them.&lt;/p>&lt;/blockquote>
&lt;p>注意，Java 集合有一些与之关联的特殊属性。&lt;/p>
&lt;h3 id="indexing索引">Indexing(索引)
&lt;/h3>&lt;blockquote>
&lt;p>As discussed above, the &amp;ldquo;indexing&amp;rdquo; notation is actually just property reference, though a computed form of property reference rather than a constant one.&lt;/p>&lt;/blockquote>
&lt;p>如上所述，&amp;ldquo;indexing&amp;rdquo; 表示法实际上只是属性引用，尽管是一种计算形式的属性引用，而不是常数形式。&lt;/p>
&lt;blockquote>
&lt;p>For example, OGNL internally treats the &amp;ldquo;array.length&amp;rdquo; expression exactly the same as this expression:&lt;/p>&lt;/blockquote>
&lt;p>例如，OGNL 在内部处理 &amp;ldquo;array.length&amp;rdquo; 表达式与这个表达式完全相同:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s">&amp;#34;length&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>And this expression would have the same result (though not the same internal form):&lt;/p>&lt;/blockquote>
&lt;p>而这个表达式会有相同的结果(尽管内部形式不同):&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s">&amp;#34;len&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;gth&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Array and List Indexing&lt;/strong>(数组和列表索引)&lt;/p>
&lt;blockquote>
&lt;p>For Java arrays and Lists indexing is fairly simple, just like in Java. An integer index is given and that element is the referrent. If the index is out of bounds of the array or List and IndexOutOfBoundsException is thrown, just as in Java.&lt;/p>&lt;/blockquote>
&lt;p>对于 Java 数组(arrays)和列表(Lists)来说索引(indexing)相当简单，和在 Java 中一样，给出一个整数索引就能的到元素的引用对象。如果索引超出数组或列表的边界，则抛出 IndexOutOfBoundsException 异常，也和 Java 中一样。&lt;/p>
&lt;p>&lt;strong>JavaBeans Indexed Properties&lt;/strong>(JavaBeans 索引属性)&lt;/p>
&lt;blockquote>
&lt;p>JavaBeans supports the concept of Indexed properties. Specifically this means that an object has a set of methods that follow the following pattern:&lt;/p>&lt;/blockquote>
&lt;p>JavaBeans 也支持索引属性的概念。具体来说，这意味着一个对象会有一组遵循以下模式的方法:&lt;/p>
&lt;ul>
&lt;li>&lt;code>public PropertyType[] getPropertyName();&lt;/code>&lt;/li>
&lt;li>&lt;code>public void setPropertyName(PropertyType[] anArray);&lt;/code>&lt;/li>
&lt;li>&lt;code>public PropertyType getPropertyName(int index);&lt;/code>&lt;/li>
&lt;li>&lt;code>public void setPropertyName(int index, PropertyType value);&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>OGNL can interpret this and provide seamless access to the property through the indexing notation. References such as&lt;/p>&lt;/blockquote>
&lt;p>OGNL 可以解释这一点，并通过索引符号提供对属性的无缝访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">someProperty&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>are automatically routed through the correct indexed property accessor (in the above case through getSomeProperty(2) or setSomeProperty(2, value)). If there is no indexed property accessor a property is found with the name someProperty and the index is applied to that.&lt;/p>&lt;/blockquote>
&lt;p>诸如此类的引用会自动通过正确的索引属性访问器进行路由（在上述情况下通过 getSomeProperty(2) 或 setSomeProperty(2, value)）。 如果没有索引属性访问器，则会找到名为 someProperty 的属性，并将索引应用于该属性。&lt;/p>
&lt;p>&lt;strong>OGNL Object Indexed Properties&lt;/strong>(OGNL 对象索引属性)&lt;/p>
&lt;blockquote>
&lt;p>OGNL extends the concept of indexed properties to include indexing with arbitrary objects, not just integers as with JavaBeans Indexed Properties. When finding properties as candidates for object indexing, OGNL looks for patterns of methods with the following signature:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 扩展了索引属性的概念，包括对任意对象进行索引，而不仅仅是像 JavaBeans 索引属性那样对整数进行索引。 当查找属性作为对象索引的候选时，OGNL 会查找具有以下签名的方法模式：&lt;/p>
&lt;ul>
&lt;li>&lt;code>public PropertyType getPropertyName(IndexType index);&lt;/code>&lt;/li>
&lt;li>&lt;code>public void setPropertyName(IndexType index, PropertyType value);&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The PropertyType and IndexType must match each other in the corresponding set and get methods. An actual example of using Object Indexed Properties is with the Servlet API: the Session object has two methods for getting and setting arbitrary attributes:&lt;/p>&lt;/blockquote>
&lt;p>PropertyType 和 IndexType 在相应的 set 和 get 方法中必须相互匹配。 使用对象索引属性的一个实际示例是 Servlet API：Session 对象有两种获取和设置任意属性的方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>An OGNL expression that can both get and set one of these attributes is:&lt;/p>&lt;/blockquote>
&lt;p>可以获取和设置这些属性之一的 OGNL 表达式是:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">session&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">attribute&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="calling-methods调用方法">Calling Methods(调用方法)
&lt;/h2>&lt;blockquote>
&lt;p>OGNL calls methods a little differently from the way Java does, because OGNL is interpreted and must choose the right method at run time, with no extra type information aside from the actual arguments supplied. OGNL always chooses the most specific method it can find whose types match the supplied arguments; if there are two or more methods that are equally specific and match the given arguments, one of them will be chosen arbitrarily.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 调用方法的方式与 Java 的方式略有不同，因为 OGNL 是解释性的，并且必须在运行时选择正确的方法，除了提供的实际参数之外，没有额外的类型信息。 OGNL 总是选择它能找到的最具体的方法，其类型与提供的参数相匹配； 如果有两个或多个同样具体且与给定参数匹配的方法，则将任意选择其中之一。&lt;/p>
&lt;blockquote>
&lt;p>In particular, a null argument matches all non-primitive types, and so is most likely to result in an unexpected method being called.&lt;/p>&lt;/blockquote>
&lt;p>特别是，空参数匹配所有非基本类型，因此很可能导致调用意外的方法。&lt;/p>
&lt;blockquote>
&lt;p>Note that the arguments to a method are separated by commas, and so the comma operator cannot be used unless it is enclosed in parentheses. For example,&lt;/p>&lt;/blockquote>
&lt;p>请注意，方法的参数是用逗号分隔的，因此不能使用逗号运算符，除非将其括在括号中。 例如，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ensureLoaded&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>is a call to a 2-argument method, while&lt;/p>&lt;/blockquote>
&lt;p>上面是对 2 参数方法的调用，而下面的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ensureLoaded&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>is a call to a 1-argument method.&lt;/p>&lt;/blockquote>
&lt;p>是对 1 参数方法的调用。&lt;/p>
&lt;h2 id="variable-references变量引用">Variable References(变量引用)
&lt;/h2>&lt;blockquote>
&lt;p>OGNL has a simple variable scheme, which lets you store intermediate results and use them again, or just name things to make an expression easier to understand. All variables in OGNL are global to the entire expression. You refer to a variable using a number sign in front of its name, like this:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 有一个简单的变量方案，它允许你存储中间结果并再次使用它们，或者只是命名事物以使表达式更易于理解。 OGNL 中的所有变量对于整个表达式都是全局的。 你可以在变量名称前面使用数字符号来引用变量，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>OGNL also stores the current object at every point in the evaluation of an expression in the this variable, where it can be referred to like any other variable. For example, the following expression operates on the number of listeners, returning twice the number if it is more than 100, or 20 more than the number otherwise:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 还将表达式求值中每个点的当前对象存储在 this 变量中，可以像任何其他变量一样引用它。 例如，以下表达式对侦听器的数量进行操作，如果大于 100，则返回该数字的两倍，否则返回该数字的 20：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="p">().(&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">100&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>OGNL can be invoked with a map that defines initial values for variables. The standard way of invoking OGNL defines the variables root (which holds the initial, or root, object), and context (which holds the Map of variables itself).&lt;/p>&lt;/blockquote>
&lt;p>可以使用定义变量初始值的映射来调用 OGNL。 调用 OGNL 的标准方法定义变量根(root)（保存初始或根对象(root)）和上下文（保存变量本身的映射）。&lt;/p>
&lt;blockquote>
&lt;p>To assign a value to a variable explicitly, simply write an assignment statement with a variable reference on the left-hand side:&lt;/p>&lt;/blockquote>
&lt;p>要显式地将值赋给变量，只需在左侧写一个赋值语句并引用变量:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">= &lt;/span>&lt;span class="n">99&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="parenthetical-expressions括号表达式">Parenthetical Expressions(括号表达式)
&lt;/h2>&lt;blockquote>
&lt;p>As you would expect, an expression enclosed in parentheses is evaluated as a unit, separately from any surrounding operators. This can be used to force an evaluation order different from the one that would be implied by OGNL operator precedences. It is also the only way to use the comma operator in a method argument.&lt;/p>&lt;/blockquote>
&lt;p>正如你所期望的那样，括在括号中的表达式作为一个单位计算，与周围的任何操作符分开。这可用于强制不同于 OGNL 操作符优先级所暗示的求值顺序。这也是在方法参数中使用逗号操作符的唯一方法。&lt;/p>
&lt;h2 id="chained-subexpressions链接子表达式">Chained Subexpressions(链接子表达式)
&lt;/h2>&lt;blockquote>
&lt;p>If you use a parenthetical expression after a dot, the object that is current at the dot is used as the current object throughout the parenthetical expression. For example,&lt;/p>&lt;/blockquote>
&lt;p>如果在点后使用圆括号表达式，则圆点处的当前对象将用作整个圆括号表达式中的当前对象。例如,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">headline&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">parent&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="n">ensureLoaded&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>traverses through the headline and parent properties, ensures that the parent is loaded and then returns (or sets) the parent&amp;rsquo;s name.&lt;/p>&lt;/blockquote>
&lt;p>遍历标题(headline)的父属性(parent)，确保父属性被加载(ensureLoaded())，然后返回(或设置)父属性的名称。&lt;/p>
&lt;blockquote>
&lt;p>Top-level expressions can also be chained in this way. The result of the expression is the right-most expression element.&lt;/p>&lt;/blockquote>
&lt;p>顶级表达式也可以通过这种方式链接。 表达式的结果是最右边的表达式元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ensureLoaded&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This will call ensureLoaded() on the root object, then get the name property of the root object as the result of the expression.&lt;/p>&lt;/blockquote>
&lt;p>这将在根对象(root)上调用 EnsureLoaded()，然后获取根对象(root)的 name 属性作为表达式的结果。&lt;/p>
&lt;h2 id="collection-construction集合结构">Collection Construction(集合结构)
&lt;/h2>&lt;h3 id="lists列表">Lists(列表)
&lt;/h3>&lt;blockquote>
&lt;p>To create a list of objects, enclose a list of expressions in curly braces. As with method arguments, these expressions cannot use the comma operator unless it is enclosed in parentheses. Here is an example:&lt;/p>&lt;/blockquote>
&lt;p>要创建对象列表，请将表达式列表括在花括号中。 与方法参数一样，这些表达式不能使用逗号运算符，除非将其括在括号中。 这是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;Untitled&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This tests whether the name property is null or equal to &amp;ldquo;Untitled&amp;rdquo;.&lt;/p>&lt;/blockquote>
&lt;p>这测试 name 属性是否为空(null)或等于 &amp;ldquo;Untitled&amp;rdquo;。&lt;/p>
&lt;blockquote>
&lt;p>The syntax described above will create a instanceof the List interface. The exact subclass is not defined.&lt;/p>&lt;/blockquote>
&lt;p>上述语法将创建 List 接口的实例，其确切的子类未定义。&lt;/p>
&lt;h2 id="native-arrays原生数组">Native Arrays(原生数组)
&lt;/h2>&lt;blockquote>
&lt;p>Sometimes you want to create Java native arrays, such as int[] or Integer[]. OGNL supports the creation of these similarly to the way that constructors are normally called, but allows initialization of the native array from either an existing list or a given size of the array.&lt;/p>&lt;/blockquote>
&lt;p>有时你想要创建 Java 原生数组，例如 int[] 或 Integer[]。 OGNL 支持以类似于通常调用构造函数的方式创建这些数组，也允许从现有列表或给定大小的数组初始化本机数组。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This creates a new int array consisting of three integers 1, 2 and 3.&lt;/p>&lt;/blockquote>
&lt;p>这将创建一个由三个整数 1、2 和 3 组成的新 int 数组。&lt;/p>
&lt;blockquote>
&lt;p>To create an array with all null or 0 elements, use the alternative size constructor&lt;/p>&lt;/blockquote>
&lt;p>要创建包含所有 null 或 0 元素的数组，请使用指定数组大小的构造函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This creates an int array with 5 slots, all initialized to zero.&lt;/p>&lt;/blockquote>
&lt;p>这将创建一个具有 5 个槽(slots)的 int 数组，全部初始化为零。&lt;/p>
&lt;h3 id="maps映射">Maps(映射)
&lt;/h3>&lt;blockquote>
&lt;p>Maps can also be created using a special syntax.&lt;/p>&lt;/blockquote>
&lt;p>映射(Maps)只能通过特殊的语法进行创建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo value&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bar value&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This creates a Map initialized with mappings for &amp;ldquo;foo&amp;rdquo; and &amp;ldquo;bar&amp;rdquo;.&lt;/p>&lt;/blockquote>
&lt;p>这将创建一个初始化了 &amp;ldquo;foo&amp;rdquo; 和 &amp;ldquo;bar&amp;rdquo; 两个映射关系的 Map。&lt;/p>
&lt;p>Advanced users who wish to select the specific Map class can specify that class before the opening curly brace&lt;/p>
&lt;p>希望选择特定的 Map 类的高级用户可以在左打括号之前指定类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="nd">@java.util.LinkedHashMap&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo value&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bar value&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>The above example will create an instance of the JDK 1.4 class LinkedHashMap, ensuring the the insertion order of the elements is preserved.&lt;/p>&lt;/blockquote>
&lt;p>上面的示例将创建 JDK 1.4 类 LinkedHashMap 的实例，并且保留元素的插入顺序。&lt;/p>
&lt;h2 id="projecting-across-collections跨集合投影">Projecting Across Collections(跨集合投影)
&lt;/h2>&lt;blockquote>
&lt;p>OGNL provides a simple way to call the same method or extract the same property from each element in a collection and store the results in a new collection. We call this &amp;ldquo;projection,&amp;rdquo; from the database term for choosing a subset of columns from a table. For example, this expression:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 提供了一种简单的方法来调用相同的方法或从集合中的每个元素中提取相同的属性并将结果存储在新集合中。 我们将其称为&amp;quot;投影(projection)&amp;quot;，来自数据库术语，用于从表中选择列的子集。 例如，这个表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">listeners&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="n">delegate&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>returns a list of all the listeners&amp;rsquo; delegates. See the coercion section for how OGNL treats various kinds of objects as collections.&lt;/p>&lt;/blockquote>
&lt;p>返回所有 listeners 列表中所有的 delegate。 有关 OGNL 如何将各种类型的对象视为集合的信息，请参阅强制部分。&lt;/p>
&lt;blockquote>
&lt;p>During a projection the #this variable refers to the current element of the iteration.&lt;/p>&lt;/blockquote>
&lt;p>在投影期间，#this 变量引用迭代的当前元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">objects&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">instanceof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="p">()}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>The above would produce a new list of elements from the objects list as string values.&lt;/p>&lt;/blockquote>
&lt;p>上面的代码将对象中所有属性值设置为字符串。&lt;/p>
&lt;h2 id="selecting-from-collections从集合中选择">Selecting From Collections(从集合中选择)
&lt;/h2>&lt;blockquote>
&lt;p>OGNL provides a simple way to use an expression to choose some elements from a collection and save the results in a new collection. We call this &amp;ldquo;selection,&amp;rdquo; from the database term for choosing a subset of rows from a table. For example, this expression:&lt;/p>&lt;/blockquote>
&lt;p>OGNL 提供了一种简单的方法来使用表达式从集合中选择一些元素并将结果保存在新集合中。 我们将其称为 &amp;ldquo;选择(selection)&amp;quot;，来自数据库术语，用于从表中选择行的子集。 例如，这个表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">listeners&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">instanceof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ActionListener&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>returns a list of all those listeners that are instances of the ActionListener class.&lt;/p>
&lt;p>返回作为 ActionListener 类实例的所有 listener(s) 的列表。&lt;/p>
&lt;h3 id="selecting-first-match选择第一个匹配项">Selecting First Match(选择第一个匹配项)
&lt;/h3>&lt;blockquote>
&lt;p>In order to get the first match from a list of matches, you could use indexing such as listeners.{? true }[0]. However, this is cumbersome because if the match does not return any results (or if the result list is empty) you will get an ArrayIndexOutOfBoundsException.&lt;/p>&lt;/blockquote>
&lt;p>为了从匹配列表中获取第一个匹配，你可以使用索引，例如 listeners.{? true}[0]。 然而，这很麻烦，因为如果匹配没有返回任何结果（或者结果列表为空），你将得到 ArrayIndexOutOfBoundsException 异常。&lt;/p>
&lt;blockquote>
&lt;p>The selection syntax is also available to select only the first match and return it as a list. If the match does not succeed for any elements an empty list is the result.&lt;/p>&lt;/blockquote>
&lt;p>选择语法也可用于仅选择第一个匹配项并将其作为列表返回。 如果任何元素的匹配均未成功，则结果为空列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">objects&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">instanceof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Will return the first element contained in objects that is an instance of the String class.&lt;/p>&lt;/blockquote>
&lt;p>将返回对象中第一个作为 String 类实例存在的元素。&lt;/p>
&lt;h3 id="selecting-last-match选择最后一个匹配项">Selecting Last Match(选择最后一个匹配项)
&lt;/h3>&lt;blockquote>
&lt;p>Similar to getting the first match, sometimes you want to get the last element that matched.&lt;/p>&lt;/blockquote>
&lt;p>与获取第一个匹配项类似，有时您想获取最后一个匹配的元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">objects&lt;/span>&lt;span class="p">.{&lt;/span>&lt;span class="n">$&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">instanceof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>This will return the last element contained in objects that is an instanceof the String class&lt;/p>&lt;/blockquote>
&lt;p>将返回对象中最后一个作为 String 类实例存在的元素。&lt;/p>
&lt;h2 id="calling-constructors调用构造函数">Calling Constructors(调用构造函数)
&lt;/h2>&lt;blockquote>
&lt;p>You can create new objects as in Java, with the new operator. One difference is that you must specify the fully qualified class name for classes other than those in the java.lang package.&lt;/p>&lt;/blockquote>
&lt;p>您可以像在 Java 中一样使用 new 运算符创建新对象。 一个区别是，您必须为 java.lang 包中的类以外的类指定全路径类名。&lt;/p>
&lt;blockquote>
&lt;p>This is only true with the default ClassResolver in place. With a custom class resolver packages can be mapped in such a way that more Java-like references to classes can be made. Refer to the OGNL Developer&amp;rsquo;s Guide for details on using ClassResolver class (for example, new java.util.ArrayList(), rather than simply new ArrayList()).&lt;/p>&lt;/blockquote>
&lt;p>仅当使用默认的 ClassResolver 时才会出现这种情况。 如果使用自定义类解析器，也可以以这样的方式映射包，从而可以对类进行更多类似 Java 的引用。 有关使用 ClassResolver 类（例如，new java.util.ArrayList()，而不是简单的 new ArrayList()）的详细信息，请参阅 OGNL 开发人员指南。&lt;/p>
&lt;blockquote>
&lt;p>OGNL chooses the right constructor to call using the same procedure it uses for overloaded method calls.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 使用与重载方法调用相同的过程来选择正确的构造函数进行调用。&lt;/p>
&lt;h2 id="calling-static-methods调用静态方法">Calling Static Methods(调用静态方法)
&lt;/h2>&lt;blockquote>
&lt;p>You can call a static method using the syntax @class@method(args). If you leave out class, it defaults to java.lang.Math, to make it easier to call min and max methods. If you specify the class, you must give the fully qualified name.&lt;/p>&lt;/blockquote>
&lt;p>您可以使用语法 @class@method(args) 调用静态方法。 如果省略 class，则它默认为 java.lang.Math，以便更轻松地调用 min 和 max 方法。 如果指定类，则必须提供全路径名称。&lt;/p>
&lt;blockquote>
&lt;p>If you have an instance of a class whose static method you wish to call, you can call the method through the object as if it was an instance method.&lt;/p>&lt;/blockquote>
&lt;p>如果您有一个类的实例，您希望调用其静态方法，则可以通过该对象调用该方法，就像它是实例方法一样。&lt;/p>
&lt;blockquote>
&lt;p>If the method name is overloaded, OGNL chooses the right static method to call using the same procedure it uses for overloaded instance methods.&lt;/p>&lt;/blockquote>
&lt;p>如果方法名称被重载，OGNL 将使用与重载实例方法相同的过程来选择正确的静态方法进行调用。&lt;/p>
&lt;h2 id="getting-static-fields获取静态字段">Getting Static Fields(获取静态字段)
&lt;/h2>&lt;blockquote>
&lt;p>You can refer to a static field using the syntax @class@field. The class must be fully qualified.&lt;/p>&lt;/blockquote>
&lt;p>您可以使用语法@class@field 引用静态字段。 类必须为全路径。&lt;/p>
&lt;h2 id="expression-evaluation表达式求值">Expression Evaluation(表达式求值)
&lt;/h2>&lt;blockquote>
&lt;p>If you follow an OGNL expression with a parenthesized expression, without a dot in front of the parentheses, OGNL will try to treat the result of the first expression as another expression to evaluate, and will use the result of the parenthesized expression as the root object for that evaluation. The result of the first expression may be any object; if it is an AST, OGNL assumes it is the parsed form of an expression and simply interprets it; otherwise, OGNL takes the string value of the object and parses that string to get the AST to interpret.&lt;/p>&lt;/blockquote>
&lt;p>如果在 OGNL 表达式后跟一个带括号的表达式，并且括号前面没有点，OGNL 会使用后面的表达式对前面表达式的结果进行计算，并将使用带括号的表达式的结果作为根对象 (root)。 第一个表达式的结果可以是任何对象； 如果它是 AST，OGNL 假定它是表达式的解析形式并简单地解释它； 否则，OGNL 获取对象的字符串值并解析该字符串以获取要解释的 AST。&lt;/p>
&lt;blockquote>
&lt;p>For example, this expression&lt;/p>&lt;/blockquote>
&lt;p>例如，这个表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="n">fact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">30H&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>looks up the fact variable, and interprets the value of that variable as an OGNL expression using the BigInteger representation of 30 as the root object. See below for an example of setting the fact variable with an expression that returns the factorial of its argument. Note that there is an ambiguity in OGNL&amp;rsquo;s syntax between this double evaluation operator and a method call. OGNL resolves this ambiguity by calling anything that looks like a method call, a method call. For example, if the current object had a fact property that held an OGNL factorial expression, you could not use this approach to call it&lt;/p>&lt;/blockquote>
&lt;p>查找到 fact 变量，并使用 30 类型的 BigInteger 格式进行转换，计算后将值作为根对象(root)。请参照下面的示例，该示例将参数的阶乘结果返回值设置为 fact 变量的值。 请注意，OGNL 语法中的双重求值运算符和方法调用之间存在歧义。 OGNL 通过调用任何看起来像方法调用的东西来解决这种歧义。 例如，如果当前对象有一个包含 OGNL 阶乘表达式的事实属性，则无法使用此方法来调用它&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">30H&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>because OGNL would interpret this as a call to the fact method. You could force the interpretation you want by surrounding the property reference by parentheses:&lt;/p>&lt;/blockquote>
&lt;p>因为 OGNL 会将其解释为对 fact 方法的调用。 您可以通过用括号将属性引用括起来来强制执行您想要的解释：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">fact&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">30H&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="pseudo-lambda-expressions伪-lambda-表达式">Pseudo-Lambda Expressions(伪 Lambda 表达式)
&lt;/h2>&lt;blockquote>
&lt;p>OGNL has a simplified lambda-expression syntax, which lets you write simple functions. It is not a full-blown lambda calculus, because there are no closures&amp;mdash;all variables in OGNL have global scope and extent.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 具有简化的 lambda 表达式语法，可让您编写简单的函数。 但是它不是一个成熟的 lambda 演算，因为没有闭包——OGNL 中的所有变量都具有全局作用域和范围。&lt;/p>
&lt;blockquote>
&lt;p>For example, here is an OGNL expression that declares a recursive factorial function, and then calls it:&lt;/p>&lt;/blockquote>
&lt;p>例如，下面是一个声明递归阶乘函数的 OGNL 表达式，然后调用它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span>&lt;span class="n">fact&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">fact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">fact&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">30H&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>The lambda expression is everything inside the brackets. The #this variable holds the argument to the expression, which is initially 30H, and is then one less for each successive call to the expression.&lt;/p>&lt;/blockquote>
&lt;p>lambda 表达式是括号内的所有内容。 #this 变量保存表达式的参数，最初为 30H，然后每次连续调用表达式时都会减一。&lt;/p>
&lt;blockquote>
&lt;p>OGNL treats lambda expressions as constants. The value of a lambda expression is the AST that OGNL uses as the parsed form of the contained expression.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 将 lambda 表达式视为常量。 lambda 表达式的值是 OGNL 用作所包含表达式的解析形式的 AST。&lt;/p>
&lt;h2 id="pseudo-properties-for-collections集合的伪属性">Pseudo-Properties for Collections(集合的伪属性)
&lt;/h2>&lt;blockquote>
&lt;p>There are some special properties of collections that OGNL makes available. The reason for this is that the collections do not follow JavaBeans patterns for method naming; therefore the size(), length(), etc. methods must be called instead of more intuitively referring to these as properties. OGNL corrects this by exposing certain pseudo-properties as if they were built-in.&lt;/p>&lt;/blockquote>
&lt;p>OGNL 提供了一些特殊的集合属性。 其原因是集合不遵循 JavaBeans 模式进行方法命名； 因此，必须调用 size()、length() 等方法，而不是更直观地将它们称为属性。 OGNL 通过公开某些伪属性来纠正此问题，就像它们是内置的一样。&lt;/p>
&lt;blockquote>
&lt;p>Special Collections Pseudo-Properties&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Collection&lt;/th>
&lt;th style="text-align: left">Special Properties&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Collection (inherited by Map, List &amp;amp; Set)&lt;/td>
&lt;td style="text-align: left">- size: The size of the collection &lt;br> - isEmpty: Evaluates to true if the collection is empty&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">List&lt;/td>
&lt;td style="text-align: left">- iterator: Evalutes to an Iterator over the List.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Map&lt;/td>
&lt;td style="text-align: left">- keys: Evalutes to a Set of all keys in the Map &lt;br> - values: Evaluates to a Collection of all values in the Map &lt;br> &lt;strong>Note&lt;/strong> These properties, plus size and isEmpty, are different than the indexed form of access for Maps (i.e. someMap[&amp;ldquo;size&amp;rdquo;] gets the &amp;ldquo;size&amp;rdquo; key from the map, whereas someMap.size gets the size of the Map&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Set&lt;/td>
&lt;td style="text-align: left">- iterator: Evalutes to an Iterator over the Set&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Iterator&lt;/td>
&lt;td style="text-align: left">- next: Evalutes to the next object from the Iterator &lt;br> - hasNext: Evaluates to true if there is a next object available from the Iterator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Enumeration&lt;/td>
&lt;td style="text-align: left">- next: Evalutes to the next object from the Enumeration &lt;br>- hasNext: Evaluates to true if there is a next object available from the Enumeration&lt;br> - nextElement: Synonym for next&lt;br> - hasMoreElements: Synonym for hasNext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>特殊集合伪属性&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Collection&lt;/th>
&lt;th style="text-align: left">Special Properties&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Collection (inherited by Map, List &amp;amp; Set)&lt;/td>
&lt;td style="text-align: left">- size: 集合的大小 &lt;br> - isEmpty: 集合如果为空，返回 true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">List&lt;/td>
&lt;td style="text-align: left">- iterator: List 的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Map&lt;/td>
&lt;td style="text-align: left">- keys: Map 中所有 key 的集合 &lt;br> -values: Map 中所有 value 的集合 &lt;br> &lt;strong>注意&lt;/strong> 这些属性，加上 size 和 isEmpty，与 Map 访问的索引形式不同（即 someMap[&amp;ldquo;size&amp;rdquo;] 从映射中获取 &amp;ldquo;size&amp;quot;键，而 someMap.size 获取 Map 的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Set&lt;/td>
&lt;td style="text-align: left">- iterator: Set 的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Iterator&lt;/td>
&lt;td style="text-align: left">- next: 获取迭代器的下一个对象 &lt;br> - hasNext: 如果迭代器中有下一个对象可用，返回 true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Enumeration&lt;/td>
&lt;td style="text-align: left">- next: 枚举中的下一个对象 &lt;br>- hasNext: 如果枚举中有下一个对象，返回 true&lt;br> - nextElement: next 别名&lt;br> - hasMoreElements: hasNext 别名&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="operators-that-differ-from-javas-operators与-java-不同的运算符">Operators that differ from Java&amp;rsquo;s operators(与 Java 不同的运算符)
&lt;/h2>&lt;blockquote>
&lt;p>For the most part, OGNL&amp;rsquo;s operators are borrowed from Java and work similarly to Java&amp;rsquo;s operators. See the OGNL Reference for a complete discussion. Here we describe OGNL operators that are not in Java, or that are different from Java.&lt;/p>&lt;/blockquote>
&lt;p>在很大程度上，OGNL 的运算符是从 Java 借用的，其工作方式与 Java 的运算符类似。 请参阅 OGNL 参考以获得完整的讨论。 这里我们描述 Java 中没有的或与 Java 不同的 OGNL 运算符。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>The comma (,) or sequence operator. This operator is borrowed from C. The comma is used to separate two independent expressions. The value of the second of these expressions is the value of the comma expression. Here is an example:&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>逗号 (,) 或顺序运算符。 该运算符是从 C 借用的。逗号用于分隔两个独立的表达式。 这些表达式中第二个的值是逗号表达式的值。 这是一个例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ensureLoaded&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>When this expression is evaluated, the ensureLoaded method is called (presumably to make sure that all parts of the object are in memory), then the name property is retrieved (if getting the value) or replaced (if setting).&lt;/p>&lt;/blockquote>
&lt;p>当计算此表达式时，将调用 ensureLoaded 方法（大概是为了确保对象的所有部分都在内存中），然后检索 name 属性（如果获取值）或替换（如果设置）。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>List construction with curly braces ({}). You can create a list in-line by enclosing the values in curly braces, as in this example:&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>使用大括号 ({}) 的列表结构。 您可以通过将值括在花括号中来创建内联列表，如下例所示：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>The in operator (and not in, its negation). This is a containment test, to see if a value is in a collection. For example,&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>in 运算符（和 not in，它的否定）。 这是一个包含测试，用于查看某个值是否在集合中。 例如，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;Untitled&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="setting-values-versus-getting-values设置值与获取值">Setting values versus getting values(设置值与获取值)
&lt;/h2>&lt;blockquote>
&lt;p>As stated before, some values that are gettable are not also settable because of the nature of the expression. For example,&lt;/p>&lt;/blockquote>
&lt;p>如前所述，由于表达式的性质，有些值只能获取不能设置。 例如，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">names&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">location&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>is a settable expression - the final component of the expression resolves to a settable property.&lt;/p>&lt;/blockquote>
&lt;p>是一个可设置的表达式 - 因为表达式的最终组成部分解析为可设置的属性。&lt;/p>
&lt;blockquote>
&lt;p>However, some expressions, such as&lt;/p>&lt;/blockquote>
&lt;p>然而，有些表达式，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">names&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>are not settable because they do not resolve to a settable property in an object. It is simply a computed value. If you try to evaluate this expression using any of the Ognl.setValue() methods it will fail with an InappropriateExpressionException.&lt;/p>&lt;/blockquote>
&lt;p>是不可设置值的表达式，因为它们无法解析为对象中的可设置属性。 它只是一个计算值。 如果您尝试使用任何 Ognl.setValue() 方法计算此表达式，它将失败并抛出 InpropertiesExpressionException。&lt;/p>
&lt;blockquote>
&lt;p>It is also possible to set variables using get expressions that include the &amp;lsquo;=&amp;rsquo; operator. This is useful when a get expression needs to set a variable as a side effect of execution.&lt;/p>&lt;/blockquote>
&lt;p>还可以使用包含“=”运算符的 get 表达式来设置变量。 当 get 表达式需要设置变量作为执行的副作用时，这非常有用。&lt;/p>
&lt;h2 id="coercing-objects-to-types强转对象类型">Coercing Objects to Types(强转对象类型)
&lt;/h2>&lt;blockquote>
&lt;p>Here we describe how OGNL interprets objects as various types. See below for how OGNL coerces objects to booleans, numbers, integers, and collections.&lt;/p>&lt;/blockquote>
&lt;p>这里我们描述 OGNL 如何将对象解释为各种类型。 请参阅下文，了解 OGNL 如何将对象强制转换为布尔值、数字、整数和集合。&lt;/p>
&lt;h3 id="interpreting-objects-as-booleans将对象转义为布尔值">Interpreting Objects as Booleans(将对象转义为布尔值)
&lt;/h3>&lt;blockquote>
&lt;p>Any object can be used where a boolean is required. OGNL interprets objects as booleans like this:&lt;/p>&lt;/blockquote>
&lt;p>任何需要布尔值的对象都可以使用。 OGNL 将对象解释为布尔值，如下所示：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>If the object is a Boolean, its value is extracted and returned;&lt;/li>
&lt;li>If the object is a Number, its double-precision floating-point value is compared with zero; non-zero is treated as true, zero as false;&lt;/li>
&lt;li>If the object is a Character, its boolean value is true if and only if its char value is non-zero;&lt;/li>
&lt;li>Otherwise, its boolean value is true if and only if it is non-null.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>如果对象是布尔值(Boolean)，则提取并返回其值；&lt;/li>
&lt;li>如果对象是 Number，则将其双精度浮点值与零进行比较； 非零被视为 true，零被视为 false;&lt;/li>
&lt;li>如果对象是一个字符(Character)，当且仅当其 char 值非零时，其布尔值为 true；&lt;/li>
&lt;li>否则，当且仅当它不为空时，它的布尔值才为 true。&lt;/li>
&lt;/ul>
&lt;h3 id="interpreting-objects-as-numbers将对象转义为数字">Interpreting Objects as Numbers(将对象转义为数字)
&lt;/h3>&lt;blockquote>
&lt;p>Numerical operators try to treat their arguments as numbers. The basic primitive-type wrapper classes (Integer, Double, and so on, including Character and Boolean, which are treated as integers), and the &amp;ldquo;big&amp;rdquo; numeric classes from the java.math package (BigInteger and BigDecimal), are recognized as special numeric types. Given an object of some other class, OGNL tries to parse the object&amp;rsquo;s string value as a number.&lt;/p>&lt;/blockquote>
&lt;p>数值运算符尝试将其参数视为数字。 基本基元类型包装类（Integer、Double 等，包括被视为整数的 Character 和 Boolean）以及 java.math 包中的“大”数字类（BigInteger 和 BigDecimal）被识别为 特殊的数字类型。 给定某个其他类的对象，OGNL 尝试将对象的字符串值解析为数字。&lt;/p>
&lt;blockquote>
&lt;p>Numerical operators that take two arguments use the following algorithm to decide what type the result should be. The type of the actual result may be wider, if the result does not fit in the given type.&lt;/p>&lt;/blockquote>
&lt;p>采用两个参数的数值运算符使用以下算法来决定结果应该是什么类型。 如果结果不适合给定类型，则实际结果的类型可能更宽。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>If both arguments are of the same type, the result will be of the same type if possible;&lt;/li>
&lt;li>If either argument is not of a recognized numeric class, it will be treated as if it was a Double for the rest of this algorithm;&lt;/li>
&lt;li>If both arguments are approximations to real numbers (Float, Double, or BigDecimal), the result will be the wider type;&lt;/li>
&lt;li>If both arguments are integers (Boolean, Byte, Character, Short, Integer, Long, or BigInteger), the result will be the wider type;&lt;/li>
&lt;li>If one argument is a real type and the other an integer type, the result will be the real type if the integer is narrower than &amp;ldquo;int&amp;rdquo;; BigDecimal if the integer is BigInteger; or the wider of the real type and Double otherwise.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>如果两个参数的类型相同，则结果将尽可能具有相同的类型；&lt;/li>
&lt;li>如果任一参数不属于可识别的数字类，则对于该算法的其余部分，它将被视为 Double；&lt;/li>
&lt;li>如果两个参数都是实数的近似值（Float、Double 或 BigDecimal），则结果将是较宽的类型；&lt;/li>
&lt;li>如果两个参数都是整数（Boolean、Byte、Character、Short、Integer、Long 或 BigInteger），则结果将是较宽的类型；&lt;/li>
&lt;li>如果一个参数是实数类型，另一个参数是整数类型，则如果整数比“int”窄，则结果将为实数类型； 如果整数是 BigInteger，则为 BigDecimal； 或实际类型的较宽者，否则为 Double。&lt;/li>
&lt;/ul>
&lt;h3 id="interpreting-objects-as-integers将对象转义为整数">Interpreting Objects as Integers(将对象转义为整数)
&lt;/h3>&lt;blockquote>
&lt;p>Operators that work only on integers, like the bit-shifting operators, treat their arguments as numbers, except that BigDecimals and BigIntegers are operated on as BigIntegers and all other kinds of numbers are operated on as Longs. For the BigInteger case, the result of these operators remains a BigInteger; for the Long case, the result is expressed as the same type of the arguments, if it fits, or as a Long otherwise.&lt;/p>&lt;/blockquote>
&lt;p>仅对整数起作用的运算符（如位移运算符）将其参数视为数字，但 BigDecimal 和 BigIntegers 作为 BigIntegers 进行操作，而所有其他类型的数字均作为 Long 进行操作。 对于 BigInteger 情况，这些运算符的结果仍然是 BigInteger； 对于 Long 情况，结果表示为相同类型的参数（如果适合），否则表示为 Long。&lt;/p>
&lt;h3 id="interpreting-objects-as-collections将对象转义为集合">Interpreting Objects as Collections(将对象转义为集合)
&lt;/h3>&lt;blockquote>
&lt;p>The projection and selection operators (e1.{e2} and e1.{?e2}), and the in operator, all treat one of their arguments as a collection and walk it. This is done differently depending on the class of the argument:&lt;/p>&lt;/blockquote>
&lt;p>投影和选择运算符（e1.{e2} 和 e1.{?e2}）以及 in 运算符都将其参数之一视为集合并对其进行遍历。 根据参数的类别，此操作的完成方式有所不同：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Java arrays are walked from front to back;&lt;/li>
&lt;li>Members of java.util.Collection are walked by walking their iterators;&lt;/li>
&lt;li>Members of java.util.Map are walked by walking iterators over their values;&lt;/li>
&lt;li>Members of java.util.Iterator and java.util.Enumeration are walked by iterating them;&lt;/li>
&lt;li>Members of java.lang.Number are &amp;ldquo;walked&amp;rdquo; by returning integers less than the given number starting with zero;&lt;/li>
&lt;li>All other objects are treated as singleton collections containing only themselves.&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;ul>
&lt;li>Java 数组是从前往后走的；&lt;/li>
&lt;li>java.util.Collection 的成员通过遍历其迭代器来遍历；&lt;/li>
&lt;li>java.util.Map 的成员通过遍历迭代器对其值进行遍历；&lt;/li>
&lt;li>java.util.Iterator 和 java.util.Enumeration 的成员通过迭代来遍历；&lt;/li>
&lt;li>java.lang.Number 的成员通过返回小于从零开始的给定数字的整数来“遍历”；&lt;/li>
&lt;li>所有其他对象都被视为仅包含其自身的单例集合。&lt;/li>
&lt;/ul></description></item><item><title>Arthas</title><link>https://www.lcsk42.com/post/arthas/</link><pubDate>Fri, 22 Mar 2024 09:39:46 +0800</pubDate><guid>https://www.lcsk42.com/post/arthas/</guid><description>&lt;p>Alibaba 开源的 Java 诊断工具 Arthas 使用记录。&lt;/p>
&lt;h2 id="开始">开始
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## 下载启动测试程序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -O https://arthas.aliyun.com/math-game.jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">java -jar math-game.jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 下载启动 arthas&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -O https://arthas.aliyun.com/arthas-boot.jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">java -jar arthas-boot.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="表达式核心变量">表达式核心变量
&lt;/h2>&lt;p>无论是匹配表达式也好、观察表达式也罢，他们核心判断变量都是围绕着一个 Arthas 中的通用通知对象 &lt;code>Advice&lt;/code> 进行。&lt;/p>
&lt;p>它的简略代码结构如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Advice&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ClassLoader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">loader&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">clazz&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArthasMethod&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">returnObj&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Throwable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">throwExp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isBefore&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isThrow&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isReturn&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// getter/setter&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里列一个表格来说明不同变量的含义&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">变量名&lt;/th>
&lt;th>变量解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">loader&lt;/td>
&lt;td>本次调用类所在的 ClassLoader&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">clazz&lt;/td>
&lt;td>本次调用类的 Class 引用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">method&lt;/td>
&lt;td>本次调用方法反射引用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">target&lt;/td>
&lt;td>本次调用类的实例&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">params&lt;/td>
&lt;td>本次调用参数列表，这是一个数组，如果方法是无参方法则为空数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">returnObj&lt;/td>
&lt;td>本次调用返回的对象。当且仅当 isReturn==true 成立时候有效，表明方法调用是以正常返回的方式结束。如果当前方法无返回值 void，则值为 null&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">throwExp&lt;/td>
&lt;td>本次调用抛出的异常。当且仅当 isThrow==true 成立时有效，表明方法调用是以抛出异常的方式结束。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">isBefore&lt;/td>
&lt;td>辅助判断标记，当前的通知节点有可能是在方法一开始就通知，此时 isBefore==true 成立，同时 isThrow==false 和 isReturn==false，因为在方法刚开始时，还无法确定方法调用将会如何结束。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">isThrow&lt;/td>
&lt;td>辅助判断标记，当前的方法调用以抛异常的形式结束。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">isReturn&lt;/td>
&lt;td>辅助判断标记，当前的方法调用以正常返回的形式结束。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>所有变量都可以在表达式中直接使用，如果在表达式中编写了不符合 OGNL 脚本语法或者引入了不在表格中的变量，则退出命令的执行；用户可以根据当前的异常信息修正 &lt;code>条件表达式 &lt;/code>或 &lt;code>观察表达式&lt;/code>。&lt;/p>
&lt;h2 id="基础命令">基础命令
&lt;/h2>&lt;h3 id="help">help
&lt;/h3>&lt;p>查看命令帮助信息，可以查看当前 arthas 版本支持的指令，或者查看具体指令的使用说明。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">不接参数&lt;/td>
&lt;td>查询当前 arthas 版本支持的指令以及指令描述&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[name:]&lt;/td>
&lt;td>查询具体指令的使用说明&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">help&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NAME DESCRIPTION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">help&lt;/span> Display Arthas Help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> auth Authenticates the current session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keymap Display all the available keymap &lt;span class="k">for&lt;/span> the specified connection.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sc Search all the classes loaded by JVM
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sm Search the method of classes loaded by JVM
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> classloader Show classloader info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jad Decompile class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> getstatic Show the static field of a class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> monitor Monitor method execution statistics, e.g. total/success/failure count, average rt, fail rate, etc.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stack Display the stack trace &lt;span class="k">for&lt;/span> the specified class and method
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> thread Display thread info, thread stack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> trace Trace the execution &lt;span class="nb">time&lt;/span> of specified method invocation.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watch Display the input/output parameter, &lt;span class="k">return&lt;/span> object, and thrown exception of specified method invocation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tt Time Tunnel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jvm Display the target JVM information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memory Display jvm memory info.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> perfcounter Display the perf counter information.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ognl Execute ognl expression.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mc Memory compiler, compiles java files into bytecode and class files in memory.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> redefine Redefine classes. @see Instrumentation#redefineClasses&lt;span class="o">(&lt;/span>ClassDefinition...&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> retransform Retransform classes. @see Instrumentation#retransformClasses&lt;span class="o">(&lt;/span>Class...&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dashboard Overview of target jvm&lt;span class="err">&amp;#39;&lt;/span>s thread, memory, gc, vm, tomcat info.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dump Dump class byte array from JVM
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> heapdump Heap dump
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> options View and change various Arthas options
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cls Clear the screen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reset Reset all the enhanced classes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> version Display Arthas version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session Display current session information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sysprop Display and change the system properties.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sysenv Display the system env.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vmoption Display, and update the vm diagnostic options.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger Print logger info, and update the logger level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">history&lt;/span> Display &lt;span class="nb">command&lt;/span> &lt;span class="nb">history&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cat Concatenate and print files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> base64 Encode and decode using Base64 representation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> write arguments to the standard output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">pwd&lt;/span> Return working directory name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mbean Display the mbean information
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> grep grep &lt;span class="nb">command&lt;/span> &lt;span class="k">for&lt;/span> pipes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tee tee &lt;span class="nb">command&lt;/span> &lt;span class="k">for&lt;/span> pipes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> profiler Async Profiler. https://github.com/jvm-profiling-tools/async-profiler
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vmtool jvm tool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stop Stop/Shutdown Arthas server and &lt;span class="nb">exit&lt;/span> the console.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jfr Java Flight Recorder Command
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">help&lt;/span> dashboard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> USAGE:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dashboard &lt;span class="o">[&lt;/span>-h&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-i &amp;lt;value&amp;gt;&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-n &amp;lt;value&amp;gt;&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SUMMARY:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Overview of target jvm&lt;span class="err">&amp;#39;&lt;/span>s thread, memory, gc, vm, tomcat info.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> EXAMPLES:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dashboard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dashboard -n &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dashboard -i &lt;span class="m">2000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WIKI:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> https://arthas.aliyun.com/doc/dashboard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OPTIONS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -h, --help this &lt;span class="nb">help&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -i, --interval &amp;lt;value&amp;gt; The interval &lt;span class="o">(&lt;/span>in ms&lt;span class="o">)&lt;/span> between two executions, default is &lt;span class="m">5000&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -n, --number-of-execution &amp;lt;value&amp;gt; The number of &lt;span class="nb">times&lt;/span> this &lt;span class="nb">command&lt;/span> will be executed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cls">cls
&lt;/h3>&lt;p>清空当前屏幕区域。&lt;/p>
&lt;h3 id="session">session
&lt;/h3>&lt;p>查看当前会话的信息，显示当前绑定的 pid 以及会话 id。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>如果配置了 tunnel server，会追加打印 代理 id、tunnel 服务器的 url 以及连接状态。&lt;/p>
&lt;p>如果使用了 staturl 做统计，会追加显示 statUrl 地址。&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Name Value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JAVA_PID &lt;span class="m">96956&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SESSION_ID 14219aff-0255-4e7d-aaa8-244061bd8277
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="reset">reset
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端 stop 时会重置所有增强过的类&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 还原指定类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">reset Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 还原所有类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">reset
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="version">version
&lt;/h3>&lt;p>输出当前目标 Java 进程所加载的 Arthas 版本号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.7.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="history">history
&lt;/h3>&lt;p>打印命令历史。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>历史指令会通过一个名叫 history 的文件持久化，所以 history 指令可以查看当前 arthas 服务器的所有历史命令，而不仅只是当前次会话使用过的命令。&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>清空历史指令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>显示最近执行的 n 条指令&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="quit-stop">quit-stop
&lt;/h3>&lt;p>退出当前 Arthas 客户端，其他 Arthas 客户端不受影响。等同于 exit、logout、q 三个指令。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>只是退出当前 Arthas 客户端，Arthas 的服务器端并没有关闭，所做的修改也不会被重置。&lt;/p>&lt;/blockquote>
&lt;h3 id="keymap">keymap
&lt;/h3>&lt;p>&lt;code>keymap&lt;/code> 命令输出当前的快捷键映射表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>快捷键说明&lt;/th>
&lt;th>命令名称&lt;/th>
&lt;th>命令说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;ldquo;\C-a&amp;rdquo;&lt;/td>
&lt;td>ctrl + a&lt;/td>
&lt;td>beginning-of-line&lt;/td>
&lt;td>跳到行首&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-e&amp;rdquo;&lt;/td>
&lt;td>ctrl + e&lt;/td>
&lt;td>end-of-line&lt;/td>
&lt;td>跳到行尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-f&amp;rdquo;&lt;/td>
&lt;td>ctrl + f&lt;/td>
&lt;td>forward-word&lt;/td>
&lt;td>向前移动一个单词&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-b&amp;rdquo;&lt;/td>
&lt;td>ctrl + b&lt;/td>
&lt;td>backward-word&lt;/td>
&lt;td>向后移动一个单词&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\e[D&amp;rdquo;&lt;/td>
&lt;td>键盘左方向键&lt;/td>
&lt;td>backward-char&lt;/td>
&lt;td>光标向前移动一个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\e[C&amp;rdquo;&lt;/td>
&lt;td>键盘右方向键&lt;/td>
&lt;td>forward-char&lt;/td>
&lt;td>光标向后移动一个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\e[B&amp;rdquo;&lt;/td>
&lt;td>键盘下方向键&lt;/td>
&lt;td>next-history&lt;/td>
&lt;td>下翻显示下一个命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\e[A&amp;rdquo;&lt;/td>
&lt;td>键盘上方向键&lt;/td>
&lt;td>previous-history&lt;/td>
&lt;td>上翻显示上一个命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-h&amp;rdquo;&lt;/td>
&lt;td>ctrl + h&lt;/td>
&lt;td>backward-delete-char&lt;/td>
&lt;td>向后删除一个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-?&amp;rdquo;&lt;/td>
&lt;td>ctrl + shift + /&lt;/td>
&lt;td>backward-delete-char&lt;/td>
&lt;td>向后删除一个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-u&amp;rdquo;&lt;/td>
&lt;td>ctrl + u&lt;/td>
&lt;td>undo&lt;/td>
&lt;td>撤销上一个命令，相当于清空当前行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-d&amp;rdquo;&lt;/td>
&lt;td>ctrl + d&lt;/td>
&lt;td>delete-char&lt;/td>
&lt;td>删除当前光标所在字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-k&amp;rdquo;&lt;/td>
&lt;td>ctrl + k&lt;/td>
&lt;td>kill-line&lt;/td>
&lt;td>删除当前光标到行尾的所有字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-i&amp;rdquo;&lt;/td>
&lt;td>ctrl + i&lt;/td>
&lt;td>complete&lt;/td>
&lt;td>自动补全，相当于敲 TAB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-j&amp;rdquo;&lt;/td>
&lt;td>ctrl + j&lt;/td>
&lt;td>accept-line&lt;/td>
&lt;td>结束当前行，相当于敲回车&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-m&amp;rdquo;&lt;/td>
&lt;td>ctrl + m&lt;/td>
&lt;td>accept-line&lt;/td>
&lt;td>结束当前行，相当于敲回车&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-w&amp;rdquo;&lt;/td>
&lt;td>-&lt;/td>
&lt;td>backward-delete-word&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\C-x\e[3~&amp;rdquo;&lt;/td>
&lt;td>-&lt;/td>
&lt;td>backward-kill-line&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ldquo;\e\C-?&amp;rdquo;&lt;/td>
&lt;td>-&lt;/td>
&lt;td>backward-kill-word&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>任何时候 tab 键，会根据当前的输入给出提示&lt;/li>
&lt;li>命令后敲 - 或 &amp;ndash; ，然后按 tab 键，可以展示出此命令具体的选项&lt;/li>
&lt;/ul>
&lt;h4 id="自定义快捷键">自定义快捷键
&lt;/h4>&lt;p>在当前用户目录下新建 &lt;code>$USER_HOME/.arthas/conf/inputrc&lt;/code> 文件，加入自定义配置。&lt;/p>
&lt;h4 id="后台异步命令相关快捷键">后台异步命令相关快捷键
&lt;/h4>&lt;p>ctrl + c: 终止当前命令
ctrl + z: 挂起当前命令，后续可以 bg/fg 重新支持此命令，或 kill 掉
ctrl + a: 回到行首
ctrl + e: 回到行尾&lt;/p>
&lt;h3 id="cat">cat
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>打印文件内容，和 linux 里的 cat 命令类似。&lt;/p>&lt;/blockquote>
&lt;h3 id="echo">echo
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>打印参数，和 linux 里的 echo 命令类似。&lt;/p>&lt;/blockquote>
&lt;h3 id="grep">grep
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>类似传统的 grep 命令。&lt;/p>&lt;/blockquote>
&lt;h3 id="tee">tee
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>类似传统的 tee 命令, 用于读取标准输入的数据，并将其内容输出成文件。&lt;/p>
&lt;p>tee 指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。&lt;/p>&lt;/blockquote>
&lt;h3 id="pwd">pwd
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>返回当前的工作目录，和 linux 命令类似&lt;/p>&lt;/blockquote>
&lt;h3 id="plaintext">plaintext
&lt;/h3>&lt;h3 id="wc">wc
&lt;/h3>&lt;h3 id="options">options
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>全局开关&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>默认值&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>unsafe&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否支持对系统级别的类进行增强，打开该开关可能导致把 JVM 搞挂，请慎重选择！&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dump&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否支持被增强了的类 dump 到外部文件中，如果打开开关，class 文件会被 dump 到/${application working dir}/arthas-class-dump/目录下，具体位置详见控制台输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>batch-re-transform&lt;/td>
&lt;td>true&lt;/td>
&lt;td>是否支持批量对匹配到的类执行 retransform 操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>json-format&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否支持 json 化的输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>disable-sub-class&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否禁用子类匹配，默认在匹配目标类的时候会默认匹配到其子类，如果想精确匹配，可以关闭此开关&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>support-default-method&lt;/td>
&lt;td>true&lt;/td>
&lt;td>是否支持匹配到 default method， 默认会查找 interface，匹配里面的 default method。参考 #1105 在新窗口打开&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>save-result&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否打开执行结果存日志功能，打开之后所有命令的运行结果都将保存到~/logs/arthas-cache/result.log 中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>job-timeout&lt;/td>
&lt;td>1d&lt;/td>
&lt;td>异步后台任务的默认超时时间，超过这个时间，任务自动停止；比如设置 1d, 2h, 3m, 25s，分别代表天、小时、分、秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>print-parent-fields&lt;/td>
&lt;td>true&lt;/td>
&lt;td>是否打印在 parent class 里的 filed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>verbose&lt;/td>
&lt;td>false&lt;/td>
&lt;td>是否打印更多详细信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strict&lt;/td>
&lt;td>true&lt;/td>
&lt;td>是否启用 strict 模式&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有的 options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取 option 的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options json-format
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置指定的 option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options save-result &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>默认情况下 &lt;code>json-format&lt;/code> 为 false，如果希望 &lt;code>watch&lt;/code>/&lt;code>tt&lt;/code> 等命令结果以 json 格式输出，则可以设置 &lt;code>json-format&lt;/code> 为 true。&lt;/p>&lt;/blockquote>
&lt;h4 id="打开-unsafe-开关支持-jdk-package-下的类">打开 unsafe 开关，支持 jdk package 下的类
&lt;/h4>&lt;p>默认情况下，&lt;code>watch&lt;/code>/&lt;code>trace&lt;/code>/&lt;code>tt&lt;/code>/&lt;code>trace&lt;/code>/&lt;code>monitor&lt;/code> 等命令不支持 &lt;code>java.\*&lt;/code> package 下的类。可以设置 &lt;code>unsafe&lt;/code> 为 true，则可以增强。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">options unsafe &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="关闭-strict-模式允许在-ognl-表达式里设置对象属性">关闭 strict 模式，允许在 ognl 表达式里设置对象属性
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>since 3.6.0&lt;/p>&lt;/blockquote>
&lt;p>对于新用户，在编写 ognl 表达式时，可能会出现误用。&lt;/p>
&lt;p>比如对于 &lt;code>Student&lt;/code>，判断年龄等于 18 时，可能条件表达式会误写为 &lt;code>target.age=18&lt;/code>，这个表达式实际上是把当前对象的 &lt;code>age&lt;/code> 设置为 18 了。正确的写法是 &lt;code>target.age==18&lt;/code>。&lt;/p>
&lt;p>为了防止出现类似上面的误用，Arthas 默认启用 &lt;code>strict&lt;/code> 模式，在 &lt;code>ognl&lt;/code> 表达式里，禁止更新对象的 Property 或者调用 &lt;code>setter&lt;/code> 函数。&lt;/p>
&lt;p>以 &lt;code>MathGame&lt;/code> 为例，会出现以下的错误提示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s1">&amp;#39;target&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;target.illegalArgumentCount=1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">20&lt;/span> ms, listenerId: &lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch failed, condition is: target.illegalArgumentCount&lt;span class="o">=&lt;/span>1, express is: target, By default, strict mode is true, not allowed to &lt;span class="nb">set&lt;/span> object properties. Want to &lt;span class="nb">set&lt;/span> object properties, execute &lt;span class="sb">`&lt;/span>options strict &lt;span class="nb">false&lt;/span>&lt;span class="sb">`&lt;/span>, visit /Users/lucaschen/logs/arthas/arthas.log &lt;span class="k">for&lt;/span> more details.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户如果确定要在 &lt;code>ognl&lt;/code> 表达式里更新对象，可以执行 &lt;code>options strict false&lt;/code>，关闭 strict 模式。&lt;/p>
&lt;h2 id="系统命令">系统命令
&lt;/h2>&lt;h3 id="dashboard">dashboard
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>当前系统的实时数据面板，按 ctrl+c 退出。&lt;/p>
&lt;p>当运行在 Ali-tomcat 时，会显示当前 tomcat 的实时信息，如 HTTP 请求的 qps, rt, 错误数, 线程池信息等等。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">[i:]&lt;/td>
&lt;td>刷新实时数据的时间间隔 (ms)，默认 5000ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>刷新实时数据的次数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://www.lcsk42.com/post/arthas/dashboard.png"
width="1209"
height="920"
srcset="https://www.lcsk42.com/post/arthas/dashboard_hu_bb153b684e218245.png 480w, https://www.lcsk42.com/post/arthas/dashboard_hu_612f3b3392d45954.png 1024w"
loading="lazy"
alt="dashboard"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;h4 id="数据说明">数据说明
&lt;/h4>&lt;ul>
&lt;li>ID: Java 级别的线程 ID，注意这个 ID 不能跟 jstack 中的 nativeID 一一对应。&lt;/li>
&lt;li>NAME: 线程名&lt;/li>
&lt;li>GROUP: 线程组名&lt;/li>
&lt;li>PRIORITY: 线程优先级, 1~10 之间的数字，越大表示优先级越高&lt;/li>
&lt;li>STATE: 线程的状态&lt;/li>
&lt;li>CPU%: 线程的 cpu 使用率。比如采样间隔 1000ms，某个线程的增量 cpu 时间为 100ms，则 cpu 使用率=100/1000=10%&lt;/li>
&lt;li>DELTA_TIME: 上次采样之后线程运行增量 CPU 时间，数据格式为&lt;code>秒&lt;/code>&lt;/li>
&lt;li>TIME: 线程运行总 CPU 时间，数据格式为&lt;code>分:秒&lt;/code>&lt;/li>
&lt;li>INTERRUPTED: 线程当前的中断位状态&lt;/li>
&lt;li>DAEMON: 是否是 daemon 线程&lt;/li>
&lt;/ul>
&lt;h4 id="jvm-内部线程">JVM 内部线程
&lt;/h4>&lt;p>Java 8 之后支持获取 JVM 内部线程 CPU 时间，这些线程只有名称和 CPU 时间，没有 ID 及状态等信息（显示 ID 为-1）。 通过内部线程可以观测到 JVM 活动，如 GC、JIT 编译等占用 CPU 情况，方便了解 JVM 整体运行状况。&lt;/p>
&lt;ul>
&lt;li>当 JVM 堆(heap)/元数据(metaspace)空间不足或 OOM 时，可以看到 GC 线程的 CPU 占用率明显高于其他的线程。&lt;/li>
&lt;li>当执行 &lt;code>trace/watch/tt/redefine&lt;/code> 等命令后，可以看到 JIT 线程活动变得更频繁。因为 JVM 热更新 class 字节码时清除了此 class 相关的 JIT 编译结果，需要重新编译。&lt;/li>
&lt;/ul>
&lt;p>JVM 内部线程包括下面几种：&lt;/p>
&lt;ul>
&lt;li>JIT 编译线程: 如 &lt;code>C1 CompilerThread0&lt;/code>, &lt;code>C2 CompilerThread0&lt;/code>&lt;/li>
&lt;li>GC 线程: 如 &lt;code>GC Thread0&lt;/code>, &lt;code>G1 Young RemSet Sampling&lt;/code>&lt;/li>
&lt;li>其它内部线程: 如 &lt;code>VM Periodic Task Thread&lt;/code>, &lt;code>VM Thread&lt;/code>, &lt;code>Service Thread&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="thread">thread
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看当前线程信息，查看线程的堆栈&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">id&lt;/td>
&lt;td>线程 id&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>指定最忙的前 N 个线程并打印堆栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[b]&lt;/td>
&lt;td>找出当前阻塞其他线程的线程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[i &amp;lt;value&amp;gt;]&lt;/td>
&lt;td>指定 cpu 使用率统计的采样间隔，单位为毫秒，默认值为 200&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[&amp;ndash;all]&lt;/td>
&lt;td>显示所有匹配的线程&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这里的 cpu 使用率与 linux 命令 &lt;code>top -H -p &amp;lt;pid&amp;gt;&lt;/code> 的线程 &lt;code>%CPU&lt;/code> 类似，一段采样间隔时间内，当前 JVM 里各个线程的增量 cpu 时间与采样间隔时间的比例。&lt;/p>
&lt;p>工作原理说明：&lt;/p>
&lt;ul>
&lt;li>首先第一次采样，获取所有线程的 CPU 时间(调用的是 &lt;code>java.lang.management.ThreadMXBean#getThreadCpuTime()&lt;/code> 及 &lt;code>sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()&lt;/code> 接口)&lt;/li>
&lt;li>然后睡眠等待一个间隔时间（默认为 200ms，可以通过 &lt;code>-i&lt;/code> 指定间隔时间）&lt;/li>
&lt;li>再次第二次采样，获取所有线程的 CPU 时间，对比两次采样数据，计算出每个线程的增量 CPU 时间&lt;/li>
&lt;li>线程 CPU 使用率 = 线程增量 CPU 时间 / 采样间隔时间 * 100%&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>&lt;/p>
&lt;p>注意： 这个统计也会产生一定的开销（JDK 这个接口本身开销比较大），因此会看到 as 的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如 5000 毫秒。&lt;/p>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>另外一种查看 Java 进程的线程 cpu 使用率方法：可以使用 show-busy-java-threads 这个脚本&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 一键展示当前最忙的前 N 个线程并打印堆栈&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread -n &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>没有线程 ID，包含 &lt;code>[Internal]&lt;/code>表示为 JVM 内部线程，参考 &lt;a class="link" href="#dashboard" >dashboard&lt;/a> 命令的介绍。&lt;/li>
&lt;li>&lt;code>cpuUsage&lt;/code> 为采样间隔时间内线程的 CPU 使用率，与 &lt;a class="link" href="#dashboard" >dashboard&lt;/a> 命令的数据一致。&lt;/li>
&lt;li>&lt;code>deltaTime&lt;/code> 为采样间隔时间内线程的增量 CPU 时间，小于 1ms 时被取整显示为 0ms。&lt;/li>
&lt;li>&lt;code>time&lt;/code> 线程运行总 CPU 时间。&lt;/li>
&lt;/ul>
&lt;p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 当没有参数时，显示第一页线程的信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 默认按照 CPU 增量时间降序排列，只显示第一页数据。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示所有匹配线程信息，有时需要获取全部 JVM 的线程数据进行分析。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># thread id, 显示指定线程的运行堆栈&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># thread -b, 找出当前阻塞其他线程的线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas 提供了 thread -b， 一键找出那个罪魁祸首&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># **注意**&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意， 目前只支持找出 synchronized 关键字阻塞住的线程， 如果是java.util.concurrent.Lock， 目前还不支持&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread -b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># thread -i, 指定采样时间间隔&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统计最近 1000ms 内的线程 CPU 时间&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread -i &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 列出 1000ms 内最忙的 3 个线程栈&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread -n &lt;span class="m">3&lt;/span> -i &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># thread --state ，查看指定状态的线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">thread --state WAITING
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jvm">jvm
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看当前 JVM 信息&lt;/p>&lt;/blockquote>
&lt;p>THREAD 相关:&lt;/p>
&lt;ul>
&lt;li>COUNT: JVM 当前活跃的线程数&lt;/li>
&lt;li>DAEMON-COUNT: JVM 当前活跃的守护线程数&lt;/li>
&lt;li>PEAK-COUNT: 从 JVM 启动开始曾经活着的最大线程数&lt;/li>
&lt;li>STARTED-COUNT: 从 JVM 启动开始总共启动过的线程次数&lt;/li>
&lt;li>DEADLOCK-COUNT: JVM 当前死锁的线程数&lt;/li>
&lt;/ul>
&lt;p>文件描述符相关:&lt;/p>
&lt;ul>
&lt;li>MAX-FILE-DESCRIPTOR-COUNT：JVM 进程最大可以打开的文件描述符数&lt;/li>
&lt;li>OPEN-FILE-DESCRIPTOR-COUNT：JVM 当前打开的文件描述符数&lt;/li>
&lt;/ul>
&lt;h3 id="sysprop">sysprop
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看当前 JVM 的系统属性(System Property)&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有属性&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sysprop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看单个属性, 支持通过TAB键自动补全&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sysprop java.version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改单个属性&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sysprop user.country CN
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sysenv">sysenv
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看当前 JVM 的环境属性(System Environment Variables)&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有环境变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sysenv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看单个环境变量, 支持通过TAB键自动补全&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sysenv java.version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="vmoption">vmoption
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看，更新 VM 诊断相关的参数&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看所有的 option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmoption
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看指定的 option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmoption PrintGC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新指定的 option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmoption PrintGCDetails &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="vmtool">vmtool
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>@since 3.5.1&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>vmtool&lt;/code> 利用 &lt;code>JVMTI&lt;/code> 接口，实现查询内存对象，强制 GC 等功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过 --limit参数，可以限制返回值数量，避免获取超大数据时对 JVM 造成压力。默认值是 10。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action getInstances --className java.lang.String --limit &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定 classloader name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定 classloader hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#可以通过sc命令查找到加载 class 的 classloader。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sc -d org.springframework.context.ApplicationContext
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> class-info org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> code-source file:/private/tmp/demo-arthas-spring-boot.jar!/BOOT-INF/lib/spring-boot-1.5.13.RELEASE.jar!/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> class-loader +-org.springframework.boot.loader.LaunchedURLClassLoader@19469ea2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@75b84c92
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-sun.misc.Launcher&lt;span class="nv">$ExtClassLoader&lt;/span>@4f023edb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> classLoaderHash 19469ea2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 然后用-c/--classloader 参数指定：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action getInstances -c 19469ea2 --className org.springframework.context.ApplicationContext
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定返回结果展开层数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># getInstances action 返回结果绑定到instances变量上，它是数组。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过 -x/--expand 参数可以指定结果的展开层次，默认值是 1。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action getInstances -c 19469ea2 --className org.springframework.context.ApplicationContext -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 执行表达式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># getInstances action 返回结果绑定到instances变量上，它是数组。可以通过--express参数执行指定的表达式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext --express &lt;span class="s1">&amp;#39;instances[0].getBeanDefinitionNames()&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 强制 GC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 可以结合 vmoption 命令动态打开PrintGC开关&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action forceGc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># interrupt 指定线程&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># thread id 通过-t参数指定，可以使用 thread 命令获取。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vmtool --action interruptThread -t &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="perfcounter">perfcounter
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看当前 JVM 的 Perf Counter 信息&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">perfcounter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 可以用-d参数打印更多信息：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">perfcounter -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>jdk9 以上的应用,如果没有打印出信息，应用在启动时，加下面的参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">--add-opens java.base/jdk.internal.perf&lt;span class="o">=&lt;/span>ALL-UNNAMED --add-exports java.base/jdk.internal.perf&lt;span class="o">=&lt;/span>ALL-UNNAMED --add-opens java.management/sun.management.counter.perf&lt;span class="o">=&lt;/span>ALL-UNNAMED --add-opens java.management/sun.management.counter&lt;span class="o">=&lt;/span>ALL-UNNAMED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="logger">logger
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看 logger 信息，更新 logger level&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新 logger level&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">logger --name ROOT --level debug
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="getstatic">getstatic
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过 getstatic 命令可以方便的查看类的静态属性。使用方法为 `getstatic class_name field_name`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getstatic demo.MathGame random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，使用sc -d &amp;lt;ClassName&amp;gt;提取对应 ClassLoader 的 hashcode。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果你使用-c，你需要手动输入 hashcode：-c &amp;lt;hashcode&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getstatic -c 3d4eac69 demo.MathGame random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 对于只有唯一实例的 ClassLoader 可以通过--classLoaderClass指定 class name，使用起来更加方便：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getstatic --classLoaderClass sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span> demo.MathGame random
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ognl">ognl
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>执行 ognl 表达式&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">express&lt;/td>
&lt;td>执行的表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>执行表达式的 ClassLoader 的 hashcode，默认值是 SystemClassLoader&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[x]&lt;/td>
&lt;td>结果对象的展开层次，默认值 1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 调用静态函数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ognl &lt;span class="s1">&amp;#39;@java.lang.System@out.println(&amp;#34;hello&amp;#34;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取静态类的静态字段：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ognl &lt;span class="s1">&amp;#39;@demo.MathGame@random&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 执行多行表达式，赋值给临时变量，返回一个 List：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ognl &lt;span class="s1">&amp;#39;#value1=@System@getProperty(&amp;#34;java.home&amp;#34;), #value2=@System@getProperty(&amp;#34;java.runtime.name&amp;#34;), {#value1, #value2}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>arthas 中的特殊用法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看第一个参数：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看第一个参数的 size：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].size()&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将结果按 name 属性投影：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{ #this.name }&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 按条件过滤：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{? #this.name == null }.size() &amp;gt; 0&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 过滤后统计：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{? #this.age &amp;gt; 10 }.size()&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 判断字符串相等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.demo.Test &lt;span class="nb">test&lt;/span> &lt;span class="s1">&amp;#39;params[0]==&amp;#34;xyz&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 判断 long 型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.demo.Test &lt;span class="nb">test&lt;/span> &lt;span class="s1">&amp;#39;params[0]==123456789L&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 子表达式求值：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{? #this.age &amp;gt; 10 }.size().(#this &amp;gt; 20 ? #this - 10 : #this + 10)&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选择第一个满足条件：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{^ #this.name != null}&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选择最后一个满足条件：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">watch com.taobao.container.Test &lt;span class="nb">test&lt;/span> &lt;span class="s2">&amp;#34;params[0].{&lt;/span>$&lt;span class="s2"> #this.name != null}&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 匹配线程 &amp;amp; 正则多个类多个方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">trace -E &lt;span class="s1">&amp;#39;io\.netty\.channel\.nio\.NioEventLoop|io\.netty\.util\.concurrent\.SingleThreadEventExecutor&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;select|processSelectedKeys|runAllTasks&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;@Thread@currentThread().getName().contains(&amp;#34;IO-HTTP-WORKER-IOPool&amp;#34;)&amp;amp;&amp;amp;#cost&amp;gt;500&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mbean">mbean
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看 Mbean 的信息&lt;/p>&lt;/blockquote>
&lt;p>这个命令可以便捷的查看或监控 Mbean 的属性信息。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">name-pattern&lt;/td>
&lt;td>名称表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">attribute-pattern&lt;/td>
&lt;td>属性名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[m]&lt;/td>
&lt;td>查看元信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[i:]&lt;/td>
&lt;td>刷新属性值的时间间隔 (ms)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>刷新属性值的次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配。仅对属性名有效&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 列出所有 Mbean 的名称：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 Mbean 的元信息：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean -m java.lang:type&lt;span class="o">=&lt;/span>Threading
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 mbean 属性信息：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean java.lang:type&lt;span class="o">=&lt;/span>Threading
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># mbean 的 name 支持通配符匹配：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意：ObjectName 的匹配规则与正常的通配符存在差异，详细参见：[javax.management.ObjectName](https://docs.oracle.com/javase/8/docs/api/javax/management/ObjectName.html?is-external=true)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean java.lang:type&lt;span class="o">=&lt;/span>Th*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通配符匹配特定的属性字段：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean java.lang:type&lt;span class="o">=&lt;/span>Threading *Count
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用 -E 命令切换为正则匹配：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean -E java.lang:type&lt;span class="o">=&lt;/span>Threading PeakThreadCount&lt;span class="p">|&lt;/span>ThreadCount&lt;span class="p">|&lt;/span>DaemonThreadCount
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用 -i 命令实时监控：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean -i &lt;span class="m">1000&lt;/span> java.lang:type&lt;span class="o">=&lt;/span>Threading *Count
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 实时监控使用 -i，使用 -n 命令执行命令的次数（默认为 100 次）：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mbean -i &lt;span class="m">1000&lt;/span> -n &lt;span class="m">50&lt;/span> java.lang:type&lt;span class="o">=&lt;/span>Threading *Count
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="heapdump">heapdump
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>dump java heap, 类似 jmap 命令的 heap dump 功能。&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># dump 到指定文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成文件在arthas-output目录，可以通过浏览器下载： http://localhost:8563/arthas-output/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">heapdump arthas-output/dump.hprof
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只 dump live 对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">heapdump --live /tmp/dump.hprof
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># dump 到临时文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">heapdump
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="类命令">类命令
&lt;/h2>&lt;h3 id="sc">sc
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看 JVM 已加载的类信息&lt;/p>&lt;/blockquote>
&lt;p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 &lt;code>[d]&lt;/code>、&lt;code>[E]&lt;/code>、&lt;code>[f]&lt;/code> 和 &lt;code>[x:]&lt;/code>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>方法名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[d]&lt;/td>
&lt;td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。如果一个类被多个 ClassLoader 所加载，则会出现多次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[f]&lt;/td>
&lt;td>输出当前类的成员变量信息（需要配合参数-d 一起使用）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[x:]&lt;/td>
&lt;td>指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 toString 输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>指定 class 的 ClassLoader 的 hashcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>具有详细信息的匹配类的最大数量（默认为 100）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[cs &amp;lt;arg&amp;gt;]&lt;/td>
&lt;td>指定 class 的 ClassLoader#toString() 返回值。长格式[classLoaderStr &amp;lt;arg&amp;gt;]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;em>提示&lt;/em>&lt;/p>
&lt;p>class-pattern 支持全限定名，如 &lt;code>com.taobao.test.AAA&lt;/code>，也支持 &lt;code>com/taobao/test/AAA&lt;/code> 这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把 &lt;code>/&lt;/code> 替换为 &lt;code>.&lt;/code> 啦。&lt;/p>
&lt;p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开 &lt;code>options disable-sub-class true&lt;/code> 开关&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 模糊搜索&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sc demo.*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 打印类的详细信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sc -d demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 打印出类的 Field 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sc -d -f demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过 ClassLoader#toString 查找类（前提：有一个 toString()返回值是apo的类加载器，加载的类中包含 `demo.MathGame`, `demo.MyBar`, `demo.MyFoo3` 个类）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sc -cs apo *demo*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sm">sm
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看已加载类的方法信息&lt;/p>&lt;/blockquote>
&lt;p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。&lt;/p>
&lt;p>&lt;code>sm&lt;/code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>方法名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[d]&lt;/td>
&lt;td>展示每个方法的详细信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>指定 class 的 ClassLoader 的 hashcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>具有详细信息的匹配类的最大数量（默认为 100）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sm java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sm -d java.lang.String toString
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jad">jad
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>反编译指定已加载类的源码&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>jad&lt;/code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；如需批量下载指定包的目录的 class 字节码可以参考 dump。&lt;/p>
&lt;ul>
&lt;li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便&lt;/li>
&lt;li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>类所属 ClassLoader 的 hashcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反编译java.lang.String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jad java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反编译时只显示源代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 默认情况下，反编译结果里会带有 ClassLoader 信息，通过 --source-only 选项，可以只打印源代码。方便和 mc/retransform 命令结合使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jad --source-only demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反编译指定的函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jad demo.MathGame main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反编译时不显示行号&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --lineNumber 参数默认值为 true，显示指定为 false 则不打印行号。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jad demo.MathGame main --lineNumber &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 反编译时指定 ClassLoader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 当有多个 ClassLoader 都加载了这个类时，jad 命令会输出对应 ClassLoader 实例的 hashcode，然后你只需要重新执行 jad 命令，并使用参数 -c &amp;lt;hashcode&amp;gt; 就可以反编译指定 ClassLoader 加载的那个类了；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jad org.apache.log4j.Logger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 对于只有唯一实例的 ClassLoader 还可以通过--classLoaderClass指定 class name，使用起来更加方便：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># --classLoaderClass 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而-c &amp;lt;hashcode&amp;gt;是动态变化的。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mc-retransform">mc-retransform
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; **提示**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; 加载外部的.class文件，retransform jvm 已加载的类。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># retransform 指定的 .class 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 加载指定的 .class 文件，然后解析出 class name，再 retransform jvm 中已加载的对应的类。每加载一个 .class 文件，则会记录一个 retransform entry.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果多次执行 retransform 加载同一个 class 文件，则会有多条 retransform entry.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform /tmp/Test.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 retransform entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry 对应的 .class 文件的次数，但并不表明 transform 一定成功。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除指定 retransform entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 需要指定 id：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform -d &lt;span class="m">1&lt;/span> &lt;span class="c1"># delete retransform entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除所有 retransform entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform --deleteAll &lt;span class="c1"># delete all retransform entries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显式触发 retransform&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意：对于同一个类，当存在多个 retransform entry 时，如果显式触发 retransform ，则最后添加的 entry 生效(id 最大的)。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform --classPattern demo.* &lt;span class="c1"># triger retransform classes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform -c 327a647b /tmp/Test.class /tmp/Test&lt;span class="se">\$&lt;/span>Inner.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform --classLoaderClass &lt;span class="s1">&amp;#39;sun.misc.Launcher$AppClassLoader&amp;#39;&lt;/span> /tmp/Test.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="如果对某个类执行-retransform-之后想消除影响则需要">如果对某个类执行 retransform 之后，想消除影响，则需要
&lt;/h4>&lt;ul>
&lt;li>删除这个类对应的 retransform entry&lt;/li>
&lt;li>重新触发 retransform&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>如果不清除掉所有的 retransform entry，并重新触发 retransform ，则 arthas stop 时，retransform 过的类仍然生效。&lt;/p>&lt;/blockquote>
&lt;h4 id="结合-jadmc-命令使用">结合 jad/mc 命令使用
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">jad --source-only com.example.demo.arthas.user.UserController &amp;gt; /tmp/UserController.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mc /tmp/UserController.java -d /tmp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">retransform /tmp/com/example/demo/arthas/user/UserController.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>jad 命令反编译，然后可以用其它编译器，比如 vim 来修改源码&lt;/li>
&lt;li>mc 命令来内存编译修改过的代码&lt;/li>
&lt;li>用 retransform 命令加载新的字节码&lt;/li>
&lt;/ul>
&lt;h4 id="上传-class-文件到服务器的技巧">上传 .class 文件到服务器的技巧
&lt;/h4>&lt;p>使用 mc 命令来编译 jad 的反编译的代码有可能失败。可以在本地修改代码，编译好后再上传到服务器上。有的服务器不允许直接上传文件，可以使用 base64 命令来绕过。&lt;/p>
&lt;ol>
&lt;li>在本地先转换.class 文件为 base64，再保存为 result.txt&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">base64 &amp;lt; Test.class &amp;gt; result.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>到服务器上，新建并编辑 result.txt，复制本地的内容，粘贴再保存&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把服务器上的 result.txt 还原为.class&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">base64 -d &amp;lt; result.txt &amp;gt; Test.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>用 md5 命令计算哈希值，校验是否一致&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>retransform 的限制&lt;/p>
&lt;ul>
&lt;li>不允许新增加 field/method&lt;/li>
&lt;li>正在跑的函数，没有退出不能生效，比如下面新增加的 &lt;code>System.out.println&lt;/code>，只有 &lt;code>run()&lt;/code> 函数里的会生效&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MathGame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptedException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MathGame&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">game&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MathGame&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">game&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这个不生效，因为代码一直跑在 while里&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;in loop&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptedException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这个生效，因为run()函数每次都可以完整结束&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;call run()&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">primeFactors&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">primeFactors&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">primeFactors&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;illegalArgumentCount:%3d, &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">illegalArgumentCount&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mc-redefine">mc-redefine
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>推荐使用 &lt;a class="link" href="#mc-retransform" >retransform&lt;/a> 命令&lt;/p>&lt;/blockquote>
&lt;h3 id="dump">dump
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>dump 已加载类的 bytecode 到特定目录&lt;/p>&lt;/blockquote>
&lt;p>dump 命令将 JVM 中实际运行的 class 的 byte code dump 到指定目录，适用场景批量下载指定包目录的 class 字节码；如需反编译单一类、实时查看类信息，可参考 &lt;a class="link" href="#jad" >jad&lt;/a>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>类所属 ClassLoader 的 hashcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[d:]&lt;/td>
&lt;td>设置类文件的目标目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">dump java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dump demo.*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dump -d /tmp/output java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定 classLoader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果你使用 -c，你需要手动输入 hashcode：-c &amp;lt;hashcode&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dump -c 3d4eac69 demo.*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 对于只有唯一实例的 ClassLoader 可以通过--classLoaderClass指定 class name，使用起来更加方便：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dump --classLoaderClass sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span> demo.*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="classloader">classloader
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>查看 classloader 的继承树，urls，类加载信息&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>classloader&lt;/code> 命令将 JVM 中所有的 classloader 的信息统计出来，并可以展示继承树，urls 等。&lt;/p>
&lt;p>可以让指定的 classloader 去 getResources，打印出所有查找到的 resources 的 url。对于 &lt;code>ResourceNotFoundException&lt;/code> 比较有用。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">[l]&lt;/td>
&lt;td>按类加载实例进行统计&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[t]&lt;/td>
&lt;td>打印所有 ClassLoader 的继承树&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[a]&lt;/td>
&lt;td>列出所有 ClassLoader 加载的类，请谨慎使用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>ClassLoader 的 hashcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[classLoaderClass:]&lt;/td>
&lt;td>指定执行表达式的 ClassLoader 的 class name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c: r:]&lt;/td>
&lt;td>用 ClassLoader 去查找 resource&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c: load:]&lt;/td>
&lt;td>用 ClassLoader 去加载指定的类&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 按类加载类型查看统计信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 按类加载实例查看统计信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 ClassLoader 的继承树&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 URLClassLoader 实际的 urls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -c 3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 对于只有唯一实例的 ClassLoader 可以通过 class name 指定，使用起来更加方便：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader --classLoaderClass sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用 ClassLoader 去查找 resource&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -c 3d4eac69 -r META-INF/MANIFEST.MF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 也可以尝试查找类的 class 文件：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -c 1b6d3586 -r java/lang/String.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用 ClassLoader 去加载类&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader -c 3d4eac69 --load demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统计 ClassLoader 实际使用 URL 和未使用的 URL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">classloader --url-stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意，基于 JVM 目前已加载的所有类统计，不代表 Unused URLs 可以从应用中删掉。因为可能将来需要从 Unused URLs 里加载类，或者需要加载 resources。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="增强命令">增强命令
&lt;/h2>&lt;h3 id="monitor">monitor
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>方法执行监控&lt;/p>&lt;/blockquote>
&lt;p>对匹配 &lt;code>class-pattern&lt;/code>／&lt;code>method-pattern&lt;/code>／&lt;code>condition-express&lt;/code> 的类、方法的调用进行监控。&lt;/p>
&lt;p>&lt;code>monitor&lt;/code> 命令是一个非实时返回命令.&lt;/p>
&lt;p>实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 &lt;code>Ctrl+C&lt;/code> 为止。&lt;/p>
&lt;p>服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何 Arthas 命令不会引起原有业务逻辑的改变。&lt;/p>
&lt;p>监控维度：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">监控项&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">timestamp&lt;/td>
&lt;td>时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">class&lt;/td>
&lt;td>Java 类&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">method&lt;/td>
&lt;td>方法（构造方法、普通方法）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">total&lt;/td>
&lt;td>调用次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">success&lt;/td>
&lt;td>成功次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">fail&lt;/td>
&lt;td>失败次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">rt&lt;/td>
&lt;td>平均 RT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">fail-rate&lt;/td>
&lt;td>失败率&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>参数：&lt;/p>
&lt;p>方法拥有一个命名参数 &lt;code>[c:]&lt;/code>，意思是统计周期（cycle of output），拥有一个整型的参数值&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>方法名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>condition-express&lt;/em>&lt;/td>
&lt;td>条件表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[c:]&lt;/td>
&lt;td>统计周期，默认值为 120 秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[b]&lt;/td>
&lt;td>在方法调用之前计算 condition-express&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[m &amp;lt;arg&amp;gt;]&lt;/td>
&lt;td>指定 Class 最大匹配数量，默认值为 50。长格式为[maxMatch &amp;lt;arg&amp;gt;]。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ monitor -c &lt;span class="m">5&lt;/span> demo.MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">94&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:06:38 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">4&lt;/span> 1.15 80.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:06:43 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 42.29 40.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:06:48 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 67.92 40.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:06:53 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> 0.25 60.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:06:58 demo.MathGame primeFactors &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> 0.45 0.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2018-12-03 19:07:03 demo.MathGame primeFactors &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> 3182.72 0.00%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="指定-class-最大匹配数量">指定 Class 最大匹配数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ monitor -c &lt;span class="m">1&lt;/span> -m &lt;span class="m">1&lt;/span> demo.MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count:1 , method count:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">384&lt;/span> ms, listenerId: 6.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2022-12-25 21:12:58 demo.MathGame primeFactors &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> 0.18 0.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2022-12-25 21:12:59 demo.MathGame primeFactors &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 0.00 0.00%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="计算条件表达式过滤统计结果方法执行完毕之后">计算条件表达式过滤统计结果(方法执行完毕之后)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">monitor -c &lt;span class="m">5&lt;/span> demo.MathGame primeFactors &lt;span class="s2">&amp;#34;params[0] &amp;lt;= 2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">19&lt;/span> ms, listenerId: &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:36 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 0.09 40.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:41 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> 0.11 60.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:46 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">4&lt;/span> 0.06 80.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:51 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">4&lt;/span> 0.12 80.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:56 demo.MathGame primeFactors &lt;span class="m">5&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 0.15 40.00%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="计算条件表达式过滤统计结果方法执行完毕之前">计算条件表达式过滤统计结果(方法执行完毕之前)
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">monitor -b -c &lt;span class="m">5&lt;/span> com.test.testes.MathGame primeFactors &lt;span class="s2">&amp;#34;params[0] &amp;lt;= 2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">21&lt;/span> ms, listenerId: &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:41:57 demo.MathGame primeFactors &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> 0.10 100.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:02 demo.MathGame primeFactors &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">3&lt;/span> 0.06 100.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:07 demo.MathGame primeFactors &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">2&lt;/span> 0.06 100.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:12 demo.MathGame primeFactors &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> 0.05 100.00%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timestamp class method total success fail avg-rt&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> fail-rate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2020-09-02 09:42:17 demo.MathGame primeFactors &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">2&lt;/span> 0.10 100.00%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="watch">watch
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>函数执行数据观测&lt;/p>&lt;/blockquote>
&lt;p>让你能方便的观察到指定函数的调用情况。能观察到的范围为：&lt;code>返回值&lt;/code>、&lt;code>抛出异常&lt;/code>、&lt;code>入参&lt;/code>，通过编写 OGNL 表达式进行对应变量的查看。&lt;/p>
&lt;p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>函数名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>express&lt;/em>&lt;/td>
&lt;td>观察表达式，默认值：{params, target, returnObj}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>condition-express&lt;/em>&lt;/td>
&lt;td>条件表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[b]&lt;/td>
&lt;td>在&lt;strong>函数调用之前&lt;/strong>观察&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[e]&lt;/td>
&lt;td>在&lt;strong>函数异常之后&lt;/strong>观察&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[s]&lt;/td>
&lt;td>在&lt;strong>函数返回之后&lt;/strong>观察&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[f]&lt;/td>
&lt;td>在&lt;strong>函数结束之后&lt;/strong>(正常返回和异常返回)观察&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[x:]&lt;/td>
&lt;td>指定输出结果的属性遍历深度，默认为 1，最大值是 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[m &amp;lt;arg&amp;gt;]&lt;/td>
&lt;td>指定 Class 最大匹配数量，默认值为 50。长格式为[maxMatch &amp;lt;arg&amp;gt;]。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写 &lt;code>&amp;quot;{params,returnObj}&amp;quot;&lt;/code>，只要是一个合法的 ognl 表达式，都能被正常支持。&lt;/p>
&lt;p>观察的维度也比较多，主要体现在参数 &lt;code>advice&lt;/code> 的数据结构上。&lt;code>Advice&lt;/code> 参数最主要是封装了通知节点的所有信息。请参考&lt;a class="link" href="#%e8%a1%a8%e8%be%be%e5%bc%8f%e6%a0%b8%e5%bf%83%e5%8f%98%e9%87%8f" >表达式核心变量&lt;/a>中关于该节点的描述。&lt;/p>
&lt;ul>
&lt;li>watch 命令定义了 4 个观察事件点，即 &lt;code>-b&lt;/code> 函数调用前，&lt;code>-e&lt;/code> 函数异常后，&lt;code>-s&lt;/code> 函数返回后，&lt;code>-f&lt;/code> 函数结束后&lt;/li>
&lt;li>4 个观察事件点 &lt;code>-b&lt;/code>、&lt;code>-e&lt;/code>、&lt;code>-s&lt;/code> 默认关闭，&lt;code>-f&lt;/code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出&lt;/li>
&lt;li>这里要注意 &lt;code>函数入参&lt;/code> 和 &lt;code>函数出参&lt;/code> 的区别，有可能在中间被修改导致前后不一致，除了 &lt;code>-b&lt;/code> 事件点 &lt;code>params&lt;/code> 代表函数入参外，其余事件都代表函数出参&lt;/li>
&lt;li>当使用 -b 时，由于观察事件点是在函数调用前，此时返回值或异常均不存在&lt;/li>
&lt;li>在 watch 命令的结果里，会打印出 &lt;code>location&lt;/code> 信息。&lt;code>location&lt;/code> 有三种可能值：&lt;code>AtEnter&lt;/code>，&lt;code>AtExit&lt;/code>，&lt;code>AtExceptionExit&lt;/code>。对应函数入口，函数正常 return，函数抛出异常。&lt;/li>
&lt;/ul>
&lt;h4 id="观察函数调用返回时的参数this-对象和返回值">观察函数调用返回时的参数、this 对象和返回值
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 观察表达式，默认值是{params, target, returnObj}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">32&lt;/span> ms, listenerId: &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>demo.MathGame.primeFactors &lt;span class="nv">location&lt;/span>&lt;span class="o">=&lt;/span>AtExceptionExit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2021-08-31 15:22:57&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.220625ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>-179173&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>java.util.Random@31cefde0&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>44&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>demo.MathGame.primeFactors &lt;span class="nv">location&lt;/span>&lt;span class="o">=&lt;/span>AtExit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2021-08-31 15:22:58&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>1.020982ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>java.util.Random@31cefde0&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>44&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>26947&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>上面的结果里，说明函数被执行了两次，第一次结果是 &lt;code>location=AtExceptionExit&lt;/code>，说明函数抛出异常了，因此 &lt;code>returnObj&lt;/code> 是 null&lt;/li>
&lt;li>在第二次结果里是 &lt;code>location=AtExit&lt;/code>，说明函数正常返回，因此可以看到 &lt;code>returnObj&lt;/code> 结果是一个 ArrayList&lt;/li>
&lt;/ul>
&lt;h4 id="指定-class-最大匹配数量-1">指定 Class 最大匹配数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors -m &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">302&lt;/span> ms, listenerId: &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>demo.MathGame.primeFactors &lt;span class="nv">location&lt;/span>&lt;span class="o">=&lt;/span>AtExceptionExit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2022-12-25 19:58:41&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.222419ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>&lt;span class="nv">isEmpty&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">size&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>demo.MathGame@3bf400&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>demo.MathGame.primeFactors &lt;span class="nv">location&lt;/span>&lt;span class="o">=&lt;/span>AtExceptionExit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2022-12-25 19:58:51&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.046928ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>&lt;span class="nv">isEmpty&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">size&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>demo.MathGame@3bf400&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="观察函数调用入口的参数和返回值">观察函数调用入口的参数和返回值
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s2">&amp;#34;{params,returnObj}&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span> -b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">50&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:23:23&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.0353ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>-1077465243&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 对比前一个例子，返回值为空（事件点为函数执行前，因此获取不到返回值）&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="同时观察函数调用前和函数返回后">同时观察函数调用前和函数返回后
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s2">&amp;#34;{params,target,returnObj}&amp;#34;&lt;/span> -x &lt;span class="m">2&lt;/span> -b -s -n &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">46&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:29:54&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.01696ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>java.util.Random@522b408a&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>13038&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> null,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:29:54&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>4.277392ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>java.util.Random@522b408a&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>13038&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>5&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>5&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>73&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>241&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>439&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>参数里 &lt;code>-n 2&lt;/code>，表示只执行两次&lt;/li>
&lt;li>这里输出结果中，第一次输出的是函数调用前的观察表达式的结果，第二次输出的是函数返回后的表达式的结果&lt;/li>
&lt;li>结果的输出顺序和事件发生的先后顺序一致，和命令中 &lt;code>-s&lt;/code> &lt;code>-b&lt;/code> 的顺序无关&lt;/li>
&lt;/ul>
&lt;h4 id="调整-x-的值观察具体的函数参数值">调整-x 的值，观察具体的函数参数值
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s2">&amp;#34;{params,target}&amp;#34;&lt;/span> -x &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">58&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:34:19&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.587833ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">serialVersionUID&lt;/span>&lt;span class="o">=&lt;/span>@Long&lt;span class="o">[&lt;/span>3905348978240129619&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">seed&lt;/span>&lt;span class="o">=&lt;/span>@AtomicLong&lt;span class="o">[&lt;/span>3133719055989&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">multiplier&lt;/span>&lt;span class="o">=&lt;/span>@Long&lt;span class="o">[&lt;/span>25214903917&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">addend&lt;/span>&lt;span class="o">=&lt;/span>@Long&lt;span class="o">[&lt;/span>11&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">mask&lt;/span>&lt;span class="o">=&lt;/span>@Long&lt;span class="o">[&lt;/span>281474976710655&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">DOUBLE_UNIT&lt;/span>&lt;span class="o">=&lt;/span>@Double&lt;span class="o">[&lt;/span>1.1102230246251565E-16&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BadBound&lt;/span>&lt;span class="o">=&lt;/span>@String&lt;span class="o">[&lt;/span>bound must be positive&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BadRange&lt;/span>&lt;span class="o">=&lt;/span>@String&lt;span class="o">[&lt;/span>bound must be greater than origin&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">BadSize&lt;/span>&lt;span class="o">=&lt;/span>@String&lt;span class="o">[&lt;/span>size must be non-negative&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">seedUniquifier&lt;/span>&lt;span class="o">=&lt;/span>@AtomicLong&lt;span class="o">[&lt;/span>-3282039941672302964&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">nextNextGaussian&lt;/span>&lt;span class="o">=&lt;/span>@Double&lt;span class="o">[&lt;/span>0.0&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">haveNextNextGaussian&lt;/span>&lt;span class="o">=&lt;/span>@Boolean&lt;span class="o">[&lt;/span>false&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">serialPersistentFields&lt;/span>&lt;span class="o">=&lt;/span>@ObjectStreamField&lt;span class="o">[][&lt;/span>&lt;span class="nv">isEmpty&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">size&lt;/span>&lt;span class="o">=&lt;/span>3&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">unsafe&lt;/span>&lt;span class="o">=&lt;/span>@Unsafe&lt;span class="o">[&lt;/span>sun.misc.Unsafe@2eaa1027&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">seedOffset&lt;/span>&lt;span class="o">=&lt;/span>@Long&lt;span class="o">[&lt;/span>24&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>13159&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-x&lt;/code> 表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是 1。&lt;/li>
&lt;li>&lt;code>-x&lt;/code> 最大值是 4，防止展开结果占用太多内存。用户可以在 &lt;code>ognl&lt;/code> 表达式里指定更具体的 field。&lt;/li>
&lt;/ul>
&lt;h4 id="条件表达式的例子">条件表达式的例子
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s2">&amp;#34;{params[0],target}&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;params[0]&amp;lt;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">68&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:36:04&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.530255ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>-18178089&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @MathGame&lt;span class="o">[&lt;/span>demo.MathGame@41cf53f9&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只有满足条件的调用，才会有响应。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="观察异常信息的例子">观察异常信息的例子
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s2">&amp;#34;{params[0],throwExp}&amp;#34;&lt;/span> -e -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">62&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:38:00&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>1.414993ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>-1120397038&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> java.lang.IllegalArgumentException: number is: -1120397038, need &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.primeFactors&lt;span class="o">(&lt;/span>MathGame.java:46&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.run&lt;span class="o">(&lt;/span>MathGame.java:24&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-e&lt;/code>表示抛出异常时才触发&lt;/li>
&lt;li>express 中，表示异常信息的变量是 &lt;code>throwExp&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="按照耗时进行过滤">按照耗时进行过滤
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s1">&amp;#39;{params, returnObj}&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;#cost&amp;gt;200&amp;#39;&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">66&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:40:28&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>2112.168897ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>5&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>428379493&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>#cost&amp;gt;200&lt;/code> (单位是 ms)表示只有当耗时大于 200ms 时才会输出，过滤掉执行时间小于 200ms 的调用&lt;/li>
&lt;/ul>
&lt;h4 id="观察当前对象中的属性">观察当前对象中的属性
&lt;/h4>&lt;p>如果想查看函数运行前后，当前对象中的属性，可以使用 target 关键字，代表当前对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s1">&amp;#39;target&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">52&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 19:41:52&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.477882ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@MathGame&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">random&lt;/span>&lt;span class="o">=&lt;/span>@Random&lt;span class="o">[&lt;/span>java.util.Random@522b408a&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">illegalArgumentCount&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>13355&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用 target.field_name 访问当前对象的某个属性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch demo.MathGame primeFactors &lt;span class="s1">&amp;#39;target.illegalArgumentCount&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">67&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 20:04:34&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>131.303498ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>8&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-03 20:04:35&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.961441ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@Integer&lt;span class="o">[&lt;/span>8&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="获取类的静态字段调用类的静态函数的例子">获取类的静态字段、调用类的静态函数的例子
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">watch demo.MathGame * &lt;span class="s1">&amp;#39;{params,@demo.MathGame@random.nextInt(100)}&amp;#39;&lt;/span> -v -n &lt;span class="m">1&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>arthas@6527&lt;span class="o">]&lt;/span>$ watch demo.MathGame * &lt;span class="s1">&amp;#39;{params,@demo.MathGame@random.nextInt(100)}&amp;#39;&lt;/span> -n &lt;span class="m">1&lt;/span> -x &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 5&lt;span class="o">)&lt;/span> cost in &lt;span class="m">34&lt;/span> ms, listenerId: &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2021-01-05 21:35:20&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.173966ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>-138282&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>89&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意这里使用 &lt;code>Thread.currentThread().getContextClassLoader()&lt;/code> 加载,使用精确 &lt;code>classloader&lt;/code> ognl 更好。&lt;/p>
&lt;h4 id="排除掉指定的类">排除掉指定的类
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>watch/trace/monitor/stack/tt 命令都支持 &lt;code>--exclude-class-pattern&lt;/code> 参数&lt;/p>&lt;/blockquote>
&lt;p>使用 &lt;code>--exclude-class-pattern&lt;/code> 参数可以排除掉指定的类，比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">watch javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="不匹配子类">不匹配子类
&lt;/h4>&lt;p>默认情况下 watch/trace/monitor/stack/tt 命令都会匹配子类。如果想不匹配，可以通过全局参数关掉。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">options disable-sub-class &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用--v-参数打印更多信息">使用 -v 参数打印更多信息
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>watch/trace/monitor/stack/tt 命令都支持 &lt;code>-v&lt;/code> 参数&lt;/p>&lt;/blockquote>
&lt;p>当命令执行之后，没有输出结果。有两种可能：&lt;/p>
&lt;ol>
&lt;li>匹配到的函数没有被执行&lt;/li>
&lt;li>条件表达式结果是 false&lt;/li>
&lt;/ol>
&lt;p>但用户区分不出是哪种情况。&lt;/p>
&lt;p>使用 -v 选项，则会打印 Condition express 的具体值和执行结果，方便确认。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ watch -v -x &lt;span class="m">2&lt;/span> demo.MathGame print &lt;span class="s1">&amp;#39;params&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;params[0] &amp;gt; 100000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">29&lt;/span> ms, listenerId: &lt;span class="m">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Condition express: params&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &amp;gt; &lt;span class="m">100000&lt;/span> , result: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Condition express: params&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &amp;gt; &lt;span class="m">100000&lt;/span> , result: &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Condition express: params&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &amp;gt; &lt;span class="m">100000&lt;/span> , result: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2020-12-02 22:38:56&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.060843ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>200033&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>200033&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Condition express: params&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &amp;gt; &lt;span class="m">100000&lt;/span> , result: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2020-12-02 22:38:57&lt;span class="p">;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nv">cost&lt;/span>&lt;span class="o">=&lt;/span>0.052877ms&lt;span class="o">]&lt;/span> &lt;span class="nv">result&lt;/span>&lt;span class="o">=&lt;/span>@Object&lt;span class="o">[][&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>123047&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>29&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>4243&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="trace">trace
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>方法内部调用路径，并输出方法路径上的每个节点上耗时&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>trace&lt;/code> 命令能主动搜索 &lt;code>class-pattern&lt;/code>／&lt;code>method-pattern&lt;/code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>方法名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>condition-express&lt;/em>&lt;/td>
&lt;td>条件表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>命令执行次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">#cost&lt;/td>
&lt;td>方法执行耗时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[m &amp;lt;arg&amp;gt;]&lt;/td>
&lt;td>指定 Class 最大匹配数量，默认值为 50。长格式为[maxMatch &amp;lt;arg&amp;gt;]。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这里重点要说明的是条件表达式，条件表达式的构成主要由 &lt;code>ognl&lt;/code> 表达式组成，所以你可以这样写 &lt;code>&amp;quot;params[0]&amp;lt;0&amp;quot;&lt;/code>，只要是一个合法的 ognl 表达式，都能被正常支持。&lt;/p>
&lt;p>很多时候我们只想看到某个方法的 rt 大于某个时间之后的 trace 结果，现在 Arthas 可以按照方法执行的耗时来进行过滤了，例如 &lt;code>trace \*StringUtils isBlank '#cost&amp;gt;100'&lt;/code> 表示当执行时间超过 100ms 的时候，才会输出 trace 的结果。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>watch/stack/trace 这个三个命令都支持 &lt;code>#cost&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>注意事项:&lt;/p>
&lt;ul>
&lt;li>trace 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。&lt;/li>
&lt;li>3.3.0 版本后，可以使用动态 Trace 功能，不断增加新的匹配类，参考下面的示例。&lt;/li>
&lt;li>目前不支持 trace java.lang.Thread getName ，考虑到不是非常必要场景，且修复有一定难度，因此当前暂不修复&lt;/li>
&lt;/ul>
&lt;h4 id="trace-函数">trace 函数
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace demo.MathGame run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">28&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2019-12-04 00:45:08&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.617465ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.078946ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2019-12-04 00:45:09&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>1.276874ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.03752ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果里的 &lt;code>#24&lt;/code>，表示在 run 函数里，在源文件的第 24 行调用了&lt;code>primeFactors()&lt;/code>函数。&lt;/p>
&lt;h4 id="指定-class-匹配的最大数量">指定 Class 匹配的最大数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace demo.MathGame run -m &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">412&lt;/span> ms, listenerId: &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2022-12-25 21:00:00&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@b4aac2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.762093ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>30.21% 0.230241ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#46 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2022-12-25 21:00:10&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@b4aac2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.315298ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>13.95% 0.043995ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#46 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="trace-次数限制">trace 次数限制
&lt;/h4>&lt;p>如果方法调用的次数很多，那么可以用 &lt;code>-n&lt;/code> 参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">trace demo.MathGame run -n &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">20&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2019-12-04 00:45:53&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.549379ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.059839ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.232887ms&lt;span class="o">]&lt;/span> demo.MathGame:print&lt;span class="o">()&lt;/span> &lt;span class="c1">#25&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Command execution &lt;span class="nb">times&lt;/span> exceed limit: 1, so &lt;span class="nb">command&lt;/span> will exit. You can &lt;span class="nb">set&lt;/span> it with -n option.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="包含-jdk-的函数">包含 jdk 的函数
&lt;/h4>&lt;ul>
&lt;li>&lt;code>--skipJDKMethod &amp;lt;value&amp;gt;&lt;/code> skip jdk method trace, default value true.&lt;/li>
&lt;/ul>
&lt;p>默认情况下，trace 不会包含 jdk 里的函数调用，如果希望 trace jdk 里的函数，需要显式设置 &lt;code>--skipJDKMethod false&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace --skipJDKMethod &lt;span class="nb">false&lt;/span> demo.MathGame run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">60&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2019-12-04 00:44:41&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>1.357742ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.028624ms&lt;span class="o">]&lt;/span> java.util.Random:nextInt&lt;span class="o">()&lt;/span> &lt;span class="c1">#23&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.045534ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.005372ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:&amp;lt;init&amp;gt;&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.012257ms&lt;span class="o">]&lt;/span> java.lang.Integer:valueOf&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.234537ms&lt;span class="o">]&lt;/span> java.lang.String:format&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>&lt;span class="nv">min&lt;/span>&lt;span class="o">=&lt;/span>0.004539ms,max&lt;span class="o">=&lt;/span>0.005778ms,total&lt;span class="o">=&lt;/span>0.010317ms,count&lt;span class="o">=&lt;/span>2&lt;span class="o">]&lt;/span> java.lang.StringBuilder:append&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.013777ms&lt;span class="o">]&lt;/span> java.lang.Exception:getMessage&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.004935ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:toString&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.06941ms&lt;span class="o">]&lt;/span> java.io.PrintStream:println&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2019-12-04 00:44:42&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>3.030432ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.010473ms&lt;span class="o">]&lt;/span> java.util.Random:nextInt&lt;span class="o">()&lt;/span> &lt;span class="c1">#23&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.023715ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.005198ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:&amp;lt;init&amp;gt;&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.006405ms&lt;span class="o">]&lt;/span> java.lang.Integer:valueOf&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.178583ms&lt;span class="o">]&lt;/span> java.lang.String:format&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>&lt;span class="nv">min&lt;/span>&lt;span class="o">=&lt;/span>0.011636ms,max&lt;span class="o">=&lt;/span>0.838077ms,total&lt;span class="o">=&lt;/span>0.849713ms,count&lt;span class="o">=&lt;/span>2&lt;span class="o">]&lt;/span> java.lang.StringBuilder:append&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.008747ms&lt;span class="o">]&lt;/span> java.lang.Exception:getMessage&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.019768ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:toString&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.076457ms&lt;span class="o">]&lt;/span> java.io.PrintStream:println&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="根据调用耗时过滤">根据调用耗时过滤
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace demo.MathGame run &lt;span class="s1">&amp;#39;#cost &amp;gt; 10&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">41&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2018-12-04 01:12:02&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>12.033735ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.006783ms&lt;span class="o">]&lt;/span> java.util.Random:nextInt&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>11.852594ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.05447ms&lt;span class="o">]&lt;/span> demo.MathGame:print&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>只会展示耗时大于 10ms 的调用路径，有助于在排查问题的时候，只关注异常情况&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，&lt;code>trace&lt;/code> 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。&lt;/li>
&lt;li>[12.033735ms] 的含义，&lt;code>12.033735&lt;/code> 的含义是：当前节点在当前步骤的耗时，单位为毫秒&lt;/li>
&lt;li>[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，&lt;code>0,0,0ms,11&lt;/code> 表示方法调用耗时，&lt;code>min,max,total,count&lt;/code>；&lt;code>throws Exception&lt;/code> 表明该方法调用中存在异常返回&lt;/li>
&lt;li>这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时&lt;/li>
&lt;/ul>
&lt;h4 id="trace-多个类或者多个函数">trace 多个类或者多个函数
&lt;/h4>&lt;p>trace 命令只会 trace 匹配到的函数里的子调用，并不会向下 trace 多层。因为 trace 是代价比较贵的，多层 trace 可能会导致最终要 trace 的类和函数非常多。&lt;/p>
&lt;p>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层 trace 的效果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">trace -E com.test.ClassA&lt;span class="p">|&lt;/span>org.test.ClassB method1&lt;span class="p">|&lt;/span>method2&lt;span class="p">|&lt;/span>method3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="trace-时间不准确">trace 时间不准确
&lt;/h4>&lt;p>比如下面的结果里：&lt;code>0.705196&lt;/code> &amp;gt; &lt;code>(0.152743 + 0.145825)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace demo.MathGame run -n &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">66&lt;/span> ms, listenerId: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2021-02-08 11:27:36&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@232204a1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.705196ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.152743ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.145825ms&lt;span class="o">]&lt;/span> demo.MathGame:print&lt;span class="o">()&lt;/span> &lt;span class="c1">#25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那么其它的时间消耗在哪些地方？&lt;/p>
&lt;ol>
&lt;li>没有被 trace 到的函数。比如 &lt;code>java.\*&lt;/code> 下的函数调用默认会忽略掉。通过增加 &lt;code>--skipJDKMethod false&lt;/code> 参数可以打印出来。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ trace demo.MathGame run --skipJDKMethod &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">35&lt;/span> ms, listenerId: &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>---ts&lt;span class="o">=&lt;/span>2021-02-08 11:27:48&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@232204a1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.810591ms&lt;span class="o">]&lt;/span> demo.MathGame:run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.034568ms&lt;span class="o">]&lt;/span> java.util.Random:nextInt&lt;span class="o">()&lt;/span> &lt;span class="c1">#23&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.119367ms&lt;span class="o">]&lt;/span> demo.MathGame:primeFactors&lt;span class="o">()&lt;/span> &lt;span class="c1">#24 [throws Exception]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.017407ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:&amp;lt;init&amp;gt;&lt;span class="o">()&lt;/span> &lt;span class="c1">#28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.127922ms&lt;span class="o">]&lt;/span> java.lang.String:format&lt;span class="o">()&lt;/span> &lt;span class="c1">#57&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>&lt;span class="nv">min&lt;/span>&lt;span class="o">=&lt;/span>0.01419ms,max&lt;span class="o">=&lt;/span>0.020221ms,total&lt;span class="o">=&lt;/span>0.034411ms,count&lt;span class="o">=&lt;/span>2&lt;span class="o">]&lt;/span> java.lang.StringBuilder:append&lt;span class="o">()&lt;/span> &lt;span class="c1">#57&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.021911ms&lt;span class="o">]&lt;/span> java.lang.Exception:getMessage&lt;span class="o">()&lt;/span> &lt;span class="c1">#57&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---&lt;span class="o">[&lt;/span>0.015643ms&lt;span class="o">]&lt;/span> java.lang.StringBuilder:toString&lt;span class="o">()&lt;/span> &lt;span class="c1">#57&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>---&lt;span class="o">[&lt;/span>0.086622ms&lt;span class="o">]&lt;/span> java.io.PrintStream:println&lt;span class="o">()&lt;/span> &lt;span class="c1">#57&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>非函数调用的指令消耗。比如 i++, getfield 等指令。&lt;/li>
&lt;li>在代码执行过程中，JVM 可能出现停顿，比如 GC，进入同步块等。&lt;/li>
&lt;/ol>
&lt;h3 id="stack">stack
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>输出当前方法被调用的调用路径&lt;/p>&lt;/blockquote>
&lt;p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>class-pattern&lt;/em>&lt;/td>
&lt;td>类名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>method-pattern&lt;/em>&lt;/td>
&lt;td>方法名表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>condition-express&lt;/em>&lt;/td>
&lt;td>条件表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[E]&lt;/td>
&lt;td>开启正则表达式匹配，默认为通配符匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>执行次数限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[m &amp;lt;arg&amp;gt;]&lt;/td>
&lt;td>指定 Class 最大匹配数量，默认值为 50。长格式为[maxMatch &amp;lt;arg&amp;gt;]。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这里重点要说明的是观察表达式，观察表达式的构成主要由 &lt;code>ognl&lt;/code> 表达式组成，所以你可以这样写 &lt;code>&amp;quot;{params,returnObj}&amp;quot;&lt;/code>，只要是一个合法的 ognl 表达式，都能被正常支持。&lt;/p>
&lt;p>观察的维度也比较多，主要体现在参数 &lt;code>advice&lt;/code> 的数据结构上。&lt;code>Advice&lt;/code> 参数最主要是封装了通知节点的所有信息。&lt;/p>
&lt;h4 id="stack---run">stack - run
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ stack demo.MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">36&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-04 01:32:19&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @demo.MathGame.run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="指定-class-最大匹配数量-2">指定 Class 最大匹配数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ stack demo.MathGame primeFactors -m &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count:1 , method count:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">561&lt;/span> ms, listenerId: 5.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2022-12-25 21:07:07&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@b4aac2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @demo.MathGame.primeFactors&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.run&lt;span class="o">(&lt;/span>MathGame.java:46&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:38&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="据条件表达式来过滤">据条件表达式来过滤
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ stack demo.MathGame primeFactors &lt;span class="s1">&amp;#39;params[0]&amp;lt;0&amp;#39;&lt;/span> -n &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">30&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-04 01:34:27&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @demo.MathGame.run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-04 01:34:30&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @demo.MathGame.run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Command execution &lt;span class="nb">times&lt;/span> exceed limit: 2, so &lt;span class="nb">command&lt;/span> will exit. You can &lt;span class="nb">set&lt;/span> it with -n option.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="据执行时间来过滤">据执行时间来过滤
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ stack demo.MathGame primeFactors &lt;span class="s1">&amp;#39;#cost&amp;gt;5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">35&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ts&lt;/span>&lt;span class="o">=&lt;/span>2018-12-04 01:35:58&lt;span class="p">;&lt;/span>&lt;span class="nv">thread_name&lt;/span>&lt;span class="o">=&lt;/span>main&lt;span class="p">;&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span>&lt;span class="nv">is_daemon&lt;/span>&lt;span class="o">=&lt;/span>false&lt;span class="p">;&lt;/span>&lt;span class="nv">priority&lt;/span>&lt;span class="o">=&lt;/span>5&lt;span class="p">;&lt;/span>&lt;span class="nv">TCCL&lt;/span>&lt;span class="o">=&lt;/span>sun.misc.Launcher&lt;span class="nv">$AppClassLoader&lt;/span>@3d4eac69
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @demo.MathGame.run&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="tt">tt
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>watch&lt;/code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。&lt;/p>
&lt;p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。&lt;/p>
&lt;p>于是乎，TimeTunnel 命令就诞生了。&lt;/p>
&lt;p>注意事项:&lt;/p>
&lt;ul>
&lt;li>tt 命令的实现是：把函数的入参/返回值等，保存到一个 &lt;code>Map&amp;lt;Integer, TimeFragment&amp;gt;&lt;/code> 里，默认的大小是 100。&lt;/li>
&lt;li>tt 相关功能在使用完之后，需要手动释放内存，否则长时间可能导致 OOM。退出 arthas 不会自动清除 tt 的缓存 map。&lt;/li>
&lt;/ul>
&lt;h4 id="记录调用">记录调用
&lt;/h4>&lt;p>对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -t demo.MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class-cnt:1 , method-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">66&lt;/span> ms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1000&lt;/span> 2018-12-04 11:15:38 1.096236 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1001&lt;/span> 2018-12-04 11:15:39 0.191848 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1002&lt;/span> 2018-12-04 11:15:40 0.069523 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1003&lt;/span> 2018-12-04 11:15:41 0.186073 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1004&lt;/span> 2018-12-04 11:15:42 17.76437 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x4b67cf4d MathGame
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="指定-class-最大匹配数量-3">指定 Class 最大匹配数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -t -m &lt;span class="m">1&lt;/span> demo.MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count:1 , method count:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">130&lt;/span> ms, listenerId: 1.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1000&lt;/span> 2022-12-25 19:41:45 2.629929 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x3bf400 MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1001&lt;/span> 2022-12-25 19:41:55 0.146161 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x3bf400 MathGame
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>命令参数解析&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-t&lt;/code>
&lt;code>tt&lt;/code> 命令有很多个主参数，&lt;code>-t&lt;/code> 就是其中之一。这个参数的表明希望记录下类 *Test 的 print 方法的每次执行情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-n 3&lt;/code>
当你执行一个调用量不高的方法时可能你还能有足够的时间用 &lt;code>CTRL+C&lt;/code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。&lt;/p>
&lt;p>此时你可以通过 &lt;code>-n&lt;/code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-m 1&lt;/code>
通过 &lt;code>-m&lt;/code> 参数指定 Class 匹配的最大数量，防止匹配到的 Class 数量太多导致 JVM 挂起，默认值是 50&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>表格字段说明&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表格字段&lt;/th>
&lt;th>字段解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>INDEX&lt;/td>
&lt;td>时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMESTAMP&lt;/td>
&lt;td>方法执行的本机时间，记录了这个时间片段所发生的本机时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>COST(ms)&lt;/td>
&lt;td>方法执行的耗时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IS-RET&lt;/td>
&lt;td>方法是否以正常返回的形式结束&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IS-EXP&lt;/td>
&lt;td>方法是否以抛异常的形式结束&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OBJECT&lt;/td>
&lt;td>执行对象的 hashCode()，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CLASS&lt;/td>
&lt;td>执行的类名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>METHOD&lt;/td>
&lt;td>执行的方法名&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>条件表达式
不知道大家是否有在使用过程中遇到以下困惑&lt;/p>
&lt;ul>
&lt;li>Arthas 似乎很难区分出重载的方法&lt;/li>
&lt;li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来&lt;/li>
&lt;/ul>
&lt;p>条件表达式也是用 OGNL 来编写，核心的判断对象依然是 Advice 对象。除了 tt 命令之外，watch、trace、stack 命令也都支持条件表达式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解决方法重载&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> tt -t *Test print params.length&lt;span class="o">==&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">tt -t *Test print &lt;span class="s1">&amp;#39;params[1] instanceof Integer&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>解决指定参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">tt -t *Test print params&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span>.mobile&lt;span class="o">==&lt;/span>&lt;span class="s2">&amp;#34;13989838402&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>构成条件表达式的 &lt;code>Advice&lt;/code> 对象&lt;/p>
&lt;p>前边看到了很多条件表达式中，都使用了 params[0]，有关这个变量的介绍，请参考表达式核心变量&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="检索调用记录">检索调用记录
&lt;/h4>&lt;p>当你用 tt 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。&lt;/p>
&lt;p>假设我们有这些记录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1000&lt;/span> 2018-12-04 11:15:38 1.096236 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1001&lt;/span> 2018-12-04 11:15:39 0.191848 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1002&lt;/span> 2018-12-04 11:15:40 0.069523 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1003&lt;/span> 2018-12-04 11:15:41 0.186073 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1004&lt;/span> 2018-12-04 11:15:42 17.76437 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1005&lt;/span> 2018-12-04 11:15:43 0.4776 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>row-cnt:6&lt;span class="o">)&lt;/span> cost in &lt;span class="m">4&lt;/span> ms.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我需要筛选出 &lt;code>primeFactors&lt;/code> 方法的调用信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -s &lt;span class="s1">&amp;#39;method.name==&amp;#34;primeFactors&amp;#34;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1000&lt;/span> 2018-12-04 11:15:38 1.096236 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1001&lt;/span> 2018-12-04 11:15:39 0.191848 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1002&lt;/span> 2018-12-04 11:15:40 0.069523 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1003&lt;/span> 2018-12-04 11:15:41 0.186073 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1004&lt;/span> 2018-12-04 11:15:42 17.76437 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1005&lt;/span> 2018-12-04 11:15:43 0.4776 &lt;span class="nb">false&lt;/span> &lt;span class="nb">true&lt;/span> 0x4b67cf4d MathGame primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>row-cnt:6&lt;span class="o">)&lt;/span> cost in &lt;span class="m">607&lt;/span> ms.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你需要一个 &lt;code>-s&lt;/code> 参数。同样的，搜索表达式的核心对象依旧是 Advice 对象。&lt;/p>
&lt;h4 id="查看调用信息">查看调用信息
&lt;/h4>&lt;p>对于具体一个时间片的信息而言，你可以通过 &lt;code>-i&lt;/code> 参数后边跟着对应的 &lt;code>INDEX&lt;/code> 编号查看到他的详细信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -i &lt;span class="m">1003&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> INDEX &lt;span class="m">1003&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GMT-CREATE 2018-12-04 11:15:41
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> 0.186073
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OBJECT 0x4b67cf4d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CLASS demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> METHOD primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IS-RETURN &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IS-EXCEPTION &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARAMETERS&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> @Integer&lt;span class="o">[&lt;/span>-564322413&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> THROW-EXCEPTION java.lang.IllegalArgumentException: number is: -564322413, need &amp;gt;&lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.primeFactors&lt;span class="o">(&lt;/span>MathGame.java:46&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.run&lt;span class="o">(&lt;/span>MathGame.java:24&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at demo.MathGame.main&lt;span class="o">(&lt;/span>MathGame.java:16&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>row-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">11&lt;/span> ms.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="重做一次调用">重做一次调用
&lt;/h4>&lt;p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。&lt;/p>
&lt;p>&lt;code>tt&lt;/code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 &lt;code>INDEX&lt;/code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 &lt;code>-p&lt;/code> 参数。通过 &lt;code>--replay-times&lt;/code> 指定 调用次数，通过 &lt;code>--replay-interval&lt;/code> 指定多次调用间隔(单位 ms, 默认 1000ms)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ tt -i &lt;span class="m">1004&lt;/span> -p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RE-INDEX &lt;span class="m">1004&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GMT-REPLAY 2018-12-04 11:26:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OBJECT 0x4b67cf4d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CLASS demo.MathGame
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> METHOD primeFactors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARAMETERS&lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> @Integer&lt;span class="o">[&lt;/span>946738738&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IS-RETURN &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IS-EXCEPTION &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> 0.186073
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RETURN-OBJ @ArrayList&lt;span class="o">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>11&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>17&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Integer&lt;span class="o">[&lt;/span>2531387&lt;span class="o">]&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Time fragment&lt;span class="o">[&lt;/span>1004&lt;span class="o">]&lt;/span> successfully replayed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>row-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">14&lt;/span> ms.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你会发现结果虽然一样，但调用的路径发生了变化，由原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。&lt;/p>
&lt;h4 id="观察表达式">观察表达式
&lt;/h4>&lt;p>&lt;code>-w, --watch-express&lt;/code> 观察时空隧道使用 &lt;code>ognl&lt;/code> 表达式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用表达式核心变量中所有变量作为已知条件编写表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>arthas@10718&lt;span class="o">]&lt;/span>$ tt -t demo.MathGame run -n &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">56&lt;/span> ms, listenerId: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1000&lt;/span> 2021-01-08 21:54:17 0.901091 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x7699a589 MathGame run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>arthas@10718&lt;span class="o">]&lt;/span>$ tt -w &lt;span class="s1">&amp;#39;target.illegalArgumentCount&amp;#39;&lt;/span> -x &lt;span class="m">1&lt;/span> -i &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Integer&lt;span class="o">[&lt;/span>60&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>row-cnt:1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">7&lt;/span> ms.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>获取类的静态字段、调用类的静态方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>arthas@10718&lt;span class="o">]&lt;/span>$ tt -t demo.MathGame run -n &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Press Q or Ctrl+C to abort.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Affect&lt;span class="o">(&lt;/span>class count: &lt;span class="m">1&lt;/span> , method count: 1&lt;span class="o">)&lt;/span> cost in &lt;span class="m">56&lt;/span> ms, listenerId: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">INDEX TIMESTAMP COST&lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span> IS-RET IS-EXP OBJECT CLASS METHOD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1000&lt;/span> 2021-01-08 21:54:17 0.901091 &lt;span class="nb">true&lt;/span> &lt;span class="nb">false&lt;/span> 0x7699a589 MathGame run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>arthas@10718&lt;span class="o">]&lt;/span>$ tt -w &lt;span class="s1">&amp;#39;@demo.MathGame@random.nextInt(100)&amp;#39;&lt;/span> -x &lt;span class="m">1&lt;/span> -i &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Integer&lt;span class="o">[&lt;/span>46&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意这里使用 &lt;code>com.taobao.arthas.core.advisor.Advice#getLoader&lt;/code> 加载,使用精确 &lt;code>classloader&lt;/code> ognl 更好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要强调的点&lt;/p>
&lt;ol>
&lt;li>ThreadLocal 信息丢失&lt;/li>
&lt;/ol>
&lt;p>很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。&lt;/p>
&lt;p>一些常见的 CASE 比如：鹰眼的 TraceId 等。&lt;/p>
&lt;ol start="2">
&lt;li>引用的对象&lt;/li>
&lt;/ol>
&lt;p>需要强调的是，tt 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 tt 查看的时候将无法看到当时最准确的值。这也是为什么 watch 命令存在的意义。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="通过索引删除指定的-tt-记录">通过索引删除指定的 tt 记录
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">tt -d &lt;span class="m">1001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="清除所有的-tt-记录">清除所有的 tt 记录
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">tt --delete-all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="profiler">profiler
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>使用 async-profiler 生成火焰图&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>profiler&lt;/code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。&lt;/p>
&lt;p>&lt;code>profiler&lt;/code> 命令基本运行结构是 &lt;code>profiler action [actionArg]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>action&lt;/em>&lt;/td>
&lt;td>要执行的操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>actionArg&lt;/em>&lt;/td>
&lt;td>属性名模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[i:]&lt;/td>
&lt;td>采样间隔（单位：ns）（默认值：10'000'000，即 10 ms）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[f:]&lt;/td>
&lt;td>将输出转储到指定路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[d:]&lt;/td>
&lt;td>运行评测指定秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[e:]&lt;/td>
&lt;td>要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="启动-profiler">启动 profiler
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>默认情况下，生成的是 cpu 的火焰图，即 event 为 cpu。可以用&amp;ndash;event 参数来指定。&lt;/p>&lt;/blockquote>
&lt;h4 id="获取已采集的-sample-的数量">获取已采集的 sample 的数量
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ profiler getSamples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">23&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="查看-profiler-状态">查看 profiler 状态
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ profiler status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>cpu&lt;span class="o">]&lt;/span> profiling is running &lt;span class="k">for&lt;/span> &lt;span class="m">4&lt;/span> seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以查看当前 profiler 在采样哪种 &lt;code>event&lt;/code> 和采样时间。&lt;/p>
&lt;h4 id="停止-profiler">停止 profiler
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 默认情况下，结果文件是html格式，也可以用--format参数指定：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ profiler stop --format html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">profiler output file: /tmp/test/arthas-output/20211207-111550.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者在--file参数里用文件名指名格式。比如--file /tmp/result.html 。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="profiler-支持的-events">profiler 支持的 events
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在不同的平台，不同的 OS 下面，支持的 events 各有不同。可以使用命令查看：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">profiler list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 可以用--event参数指定要采样的事件，比如对alloc事件进入采样：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">profiler start --event alloc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="恢复采样">恢复采样
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler resume
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>start&lt;/code> 和 &lt;code>resume&lt;/code> 的区别是：&lt;code>start&lt;/code> 是新开始采样，&lt;code>resume&lt;/code> 会保留上次 &lt;code>stop&lt;/code> 时的数据。&lt;/p>
&lt;p>通过执行 &lt;code>profiler getSamples&lt;/code> 可以查看 &lt;code>samples&lt;/code> 的数量来验证。&lt;/p>
&lt;h4 id="使用-execute-来执行复杂的命令">使用 execute 来执行复杂的命令
&lt;/h4>&lt;p>比如开始采样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler execute &lt;span class="s1">&amp;#39;start,framebuf=5000000&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>停止采样，并保存到指定文件里：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler execute &lt;span class="s1">&amp;#39;stop,file=/tmp/result.html&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="查看所有支持的-action">查看所有支持的 action
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ profiler actions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Supported Actions: &lt;span class="o">[&lt;/span>resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="查看版本">查看版本
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ profiler version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Async-profiler 1.6 built on Sep &lt;span class="m">9&lt;/span> &lt;span class="m">2019&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright &lt;span class="m">2019&lt;/span> Andrei Pangin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="配置-framebuf-参数">配置 framebuf 参数
&lt;/h4>&lt;blockquote>
&lt;p>如果遇到生成的火焰图有 [frame_buffer_overflow]，则需要增大 framebuf（默认值是 1'000'000），可以显式配置，比如：&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler start --framebuf &lt;span class="m">5000000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="配置-includeexclude-来过滤数据">配置 include/exclude 来过滤数据
&lt;/h4>&lt;p>如果应用比较复杂，生成的内容很多，想只关注部分数据，可以通过 include/exclude 来过滤。比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler start --include &lt;span class="s1">&amp;#39;java/*&amp;#39;&lt;/span> --include &lt;span class="s1">&amp;#39;demo/*&amp;#39;&lt;/span> --exclude &lt;span class="s1">&amp;#39;*Unsafe.park*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>include/exclude 都支持设置多个值 ，但是需要配置在命令行的最后。&lt;/p>&lt;/blockquote>
&lt;h4 id="指定执行时间">指定执行时间
&lt;/h4>&lt;p>比如，希望 profiler 执行 300 秒自动结束，可以用 &lt;code>-d/--duration&lt;/code> 参数指定：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler start --duration &lt;span class="m">300&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="生成-jfr-格式结果">生成 jfr 格式结果
&lt;/h4>&lt;p>注意，jfr 只支持在 &lt;code>start&lt;/code> 时配置。如果是在 &lt;code>stop&lt;/code> 时指定，则不会生效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">profiler start --file /tmp/test.jfr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>file&lt;/code> 参数支持一些变量：&lt;/p>
&lt;ul>
&lt;li>时间戳： &amp;ndash;file /tmp/test-%t.jfr&lt;/li>
&lt;li>进程 ID： &amp;ndash;file /tmp/test-%p.jfr&lt;/li>
&lt;/ul>
&lt;p>生成的结果可以用支持 jfr 格式的工具来查看。比如：&lt;/p>
&lt;ul>
&lt;li>JDK Mission Control&lt;/li>
&lt;li>JProfiler&lt;/li>
&lt;/ul>
&lt;h3 id="jfr">jfr
&lt;/h3>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>Java Flight Recorder (JFR) 是一种用于收集有关正在运行的 Java 应用程序的诊断和分析数据的工具。它集成到 Java 虚拟机 (JVM) 中，几乎不会造成性能开销，因此即使在负载较重的生产环境中也可以使用。&lt;/p>&lt;/blockquote>
&lt;p>&lt;code>jfr&lt;/code> 命令支持在程序动态运行过程中开启和关闭 JFR 记录。 记录收集有关 event 的数据。事件在特定时间点发生在 JVM 或 Java 应用程序中。每个事件都有一个名称、一个时间戳和一个可选的有效负载。负载是与事件相关的数据，例如 CPU 使用率、事件前后的 Java 堆大小、锁持有者的线程 ID 等。&lt;/p>
&lt;p>&lt;code>jfr&lt;/code> 命令基本运行结构是 &lt;code>jfr cmd [actionArg]&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>注意： JDK8 的 8u262 版本之后才支持 jfr&lt;/p>&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: right">参数名称&lt;/th>
&lt;th>参数说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: right">&lt;em>cmd&lt;/em>&lt;/td>
&lt;td>要执行的操作 支持的命令【start，status，dump，stop】&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">&lt;em>actionArg&lt;/em>&lt;/td>
&lt;td>属性名模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[n:]&lt;/td>
&lt;td>记录名称&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[r:]&lt;/td>
&lt;td>记录 id 值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[dumponexit:]&lt;/td>
&lt;td>程序退出时，是否要 dump 出 .jfr 文件，默认为 false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[d:]&lt;/td>
&lt;td>延迟多久后启动 JFR 记录，支持带单位配置，eg: 60s, 2m, 5h, 3d. 不带单位就是秒，默认无延迟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[duration:]&lt;/td>
&lt;td>JFR 记录持续时间，支持单位配置，不带单位就是秒，默认一直记录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[s:]&lt;/td>
&lt;td>采集 Event 的详细配置文件，默认是 default.jfc 位于 $JAVA_HOME/lib/jfr/default.jfc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[f:]&lt;/td>
&lt;td>将输出转储到指定路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[maxage:]&lt;/td>
&lt;td>缓冲区数据最大文件记录保存时间，支持单位配置，不带单位就是秒，默认是不限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[maxsize:]&lt;/td>
&lt;td>缓冲区的最大文件大小，支持单位配置， 不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: right">[state:]&lt;/td>
&lt;td>jfr 记录状态&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="启动-jfr-记录">启动 JFR 记录
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Started recording 1. No limit specified, using &lt;span class="nv">maxsize&lt;/span>&lt;span class="o">=&lt;/span>250MB as default.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>提示&lt;/strong>&lt;/p>
&lt;p>默认情况下，开启的是默认参数的 jfr 记录&lt;/p>&lt;/blockquote>
&lt;p>启动 jfr 记录，指定记录名，记录持续时间，记录文件保存路径。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr start -n myRecording --duration 60s -f /tmp/myRecording.jfr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Started recording 2. The result will be written to:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/myRecording.jfr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="查看-jfr-记录状态">查看 JFR 记录状态
&lt;/h4>&lt;p>默认是查看所有 JFR 记录信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recording: &lt;span class="nv">recording&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>Recording-1 &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recording: &lt;span class="nv">recording&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myRecording &lt;span class="nv">duration&lt;/span>&lt;span class="o">=&lt;/span>PT1M &lt;span class="o">(&lt;/span>closed&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看指定记录 id 的记录信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr status -r &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recording: &lt;span class="nv">recording&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>Recording-1 &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看指定状态的记录信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr status --state closed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Recording: &lt;span class="nv">recording&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myRecording &lt;span class="nv">duration&lt;/span>&lt;span class="o">=&lt;/span>PT1M &lt;span class="o">(&lt;/span>closed&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="dump-jfr-记录">dump jfr 记录
&lt;/h4>&lt;p>&lt;code>jfr dump&lt;/code> 会输出从开始到运行该命令这段时间内的记录到 JFR 文件，且不会停止 &lt;code>jfr&lt;/code> 的记录
指定记录输出路径&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr dump -r &lt;span class="m">1&lt;/span> -f /tmp/myRecording1.jfr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dump recording 1, The result will be written to:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/myRecording1.jfr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不指定文件输出路径，默认是保存到 arthas-output 目录下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr dump -r &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dump recording 1, The result will be written to:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/test/arthas-output/20220819-200915.jfr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="停止-jfr-记录">停止 jfr 记录
&lt;/h4>&lt;p>不指定记录输出路径，默认是保存到 arthas-output 目录下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ jfr stop -r &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Stop recording 1, The result will be written to:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp/test/arthas-output/20220819-202049.jfr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意一条记录只能停止一次。&lt;/p>&lt;/blockquote>
&lt;p>也可以指定记录输出路径。&lt;/p>
&lt;h4 id="通过浏览器查看-arthas-output-下面-jfr-记录的结果">通过浏览器查看 arthas-output 下面 JFR 记录的结果
&lt;/h4>&lt;p>默认情况下，arthas 使用 8563 端口，则可以打开： http://localhost:8563/arthas-output/ 查看到 arthas-output 目录下面的 JFR 记录结果。&lt;/p>
&lt;p>生成的结果可以用支持 jfr 格式的工具来查看。比如：&lt;/p>
&lt;ul>
&lt;li>JDK Mission Control&lt;/li>
&lt;/ul></description></item></channel></rss>